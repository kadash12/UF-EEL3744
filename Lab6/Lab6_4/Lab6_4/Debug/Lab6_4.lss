
Lab6_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000049b0  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003e8b  00000000  00000000  00004ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000800  00000000  00000000  00008c67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00009468  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003031  00000000  00000000  00009558  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000166  00000000  00000000  0000c589  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000c6ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e8 ed       	ldi	r30, 0xD8	; 216
 21c:	f2 e0       	ldi	r31, 0x02	; 2
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 30       	cpi	r26, 0x00	; 0
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	20 e2       	ldi	r18, 0x20	; 32
 232:	a0 e0       	ldi	r26, 0x00	; 0
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a0 30       	cpi	r26, 0x00	; 0
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 37 01 	call	0x26e	; 0x26e <main>
 244:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <accel_read>:
extern const uint8_t PMIC_CTRL_CONFIG;
extern const uint8_t PORTC_DIRCLR_CONFIG;

/* your lsm330 function definitions here */
//Returns a single byte of data that is read from a specific accelerometer register (reg_addr) within the LSM330.s
uint8_t accel_read(uint8_t reg_addr){
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
	//Select accel
	PORTF.OUTCLR = SSA;	//SSA enable
 252:	c0 ea       	ldi	r28, 0xA0	; 160
 254:	d6 e0       	ldi	r29, 0x06	; 6
 256:	18 e0       	ldi	r17, 0x08	; 8
 258:	1e 83       	std	Y+6, r17	; 0x06
	
	//Address OR with READ CYCLE enable
	spif_write( (reg_addr | READ_BIT) );
 25a:	80 68       	ori	r24, 0x80	; 128
 25c:	0e 94 4b 01 	call	0x296	; 0x296 <spif_write>
	uint8_t value = spif_read();
 260:	0e 94 59 01 	call	0x2b2	; 0x2b2 <spif_read>
	
	PORTF.OUTSET = SSA;	//SSA disable
 264:	1d 83       	std	Y+5, r17	; 0x05
	
	return(value);
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	08 95       	ret

0000026e <main>:
#include "lsm330.h"
#include "lsm330_registers.h"

int main(void){
	//Initialize SPI
	spif_init();
 26e:	0e 94 3f 01 	call	0x27e	; 0x27e <spif_init>
	
	//Read WHO_AM_I_A register
	uint8_t check = accel_read(WHO_AM_I_A);
 272:	8f e0       	ldi	r24, 0x0F	; 15
 274:	0e 94 26 01 	call	0x24c	; 0x24c <accel_read>
	return 0;
}
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	08 95       	ret

0000027e <spif_init>:
;*********************************INCLUDES**************************************/
//******************************END OF INCLUDES*********************************
/* initializes the SPI module of Port F to communicate with the LSM330 */
void spif_init(void){
  /* configure pin direction of SPI signals */
    PORTF.OUTSET = MOSI | SSA | SENSOR_SEL;		//Set initial output high.
 27e:	e0 ea       	ldi	r30, 0xA0	; 160
 280:	f6 e0       	ldi	r31, 0x06	; 6
 282:	8c e2       	ldi	r24, 0x2C	; 44
 284:	85 83       	std	Z+5, r24	; 0x05
    PORTF.DIRSET = MOSI | SCK | SSA | SENSOR_SEL;	//Output
 286:	8c ea       	ldi	r24, 0xAC	; 172
 288:	81 83       	std	Z+1, r24	; 0x01
    PORTF.DIRCLR  = MISO;	//Input
 28a:	80 e4       	ldi	r24, 0x40	; 64
 28c:	82 83       	std	Z+2, r24	; 0x02

	/* 8 MHz SPI frequency since 10MHz is the maximum allowed by the LSM330 */
	SPIF.CTRL	=	SPI_PRESCALER_DIV4_gc	|	SPI_MASTER_bm	|	SPI_MODE_3_gc	|	SPI_ENABLE_bm;
 28e:	8c e5       	ldi	r24, 0x5C	; 92
 290:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <__TEXT_REGION_LENGTH__+0x700bc0>
 294:	08 95       	ret

00000296 <spif_write>:
}

/* writes a single byte of data to the SPIF data register */
void spif_write(uint8_t data){
	//Enable Slave port f pin 4
	PORTF.OUTTGL = 0x10;
 296:	90 e1       	ldi	r25, 0x10	; 16
 298:	90 93 a7 06 	sts	0x06A7, r25	; 0x8006a7 <__TEXT_REGION_LENGTH__+0x7006a7>
	
	SPIF.DATA = data;
 29c:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x700bc3>
	while((SPIF.STATUS & 0x80) != 0x80);	/* wait for transfer to be complete */
 2a0:	e0 ec       	ldi	r30, 0xC0	; 192
 2a2:	fb e0       	ldi	r31, 0x0B	; 11
 2a4:	82 81       	ldd	r24, Z+2	; 0x02
 2a6:	88 23       	and	r24, r24
 2a8:	ec f7       	brge	.-6      	; 0x2a4 <spif_write+0xe>
	
	//Turn off slave select
	PORTF.OUTTGL = 0x10;
 2aa:	80 e1       	ldi	r24, 0x10	; 16
 2ac:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <__TEXT_REGION_LENGTH__+0x7006a7>
 2b0:	08 95       	ret

000002b2 <spif_read>:
}

/* attempts to read a byte of data from device connected to SPIF */
uint8_t spif_read(void){
  PORTF.OUTTGL = 0x10;
 2b2:	80 e1       	ldi	r24, 0x10	; 16
 2b4:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <__TEXT_REGION_LENGTH__+0x7006a7>
  
  SPIF.DATA = 0x37;                   /* write garbage to cause transaction */
 2b8:	87 e3       	ldi	r24, 0x37	; 55
 2ba:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x700bc3>
  while((SPIF.STATUS & 0x80) != 0x80);	/* wait for transfer to be complete */
 2be:	e0 ec       	ldi	r30, 0xC0	; 192
 2c0:	fb e0       	ldi	r31, 0x0B	; 11
 2c2:	82 81       	ldd	r24, Z+2	; 0x02
 2c4:	88 23       	and	r24, r24
 2c6:	ec f7       	brge	.-6      	; 0x2c2 <spif_read+0x10>
  
  PORTF.OUTTGL = 0x10;
 2c8:	80 e1       	ldi	r24, 0x10	; 16
 2ca:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <__TEXT_REGION_LENGTH__+0x7006a7>
  
  return SPIF.DATA;	
 2ce:	80 91 c3 0b 	lds	r24, 0x0BC3	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x700bc3>
 2d2:	08 95       	ret

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>
