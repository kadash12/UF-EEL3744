
quiz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00802000  000004aa  0000053e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080201c  0080201c  0000055a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000055a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000052a7  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000403f  00000000  00000000  0000592b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ae0  00000000  00000000  0000996a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  0000a44c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000032bf  00000000  00000000  0000a59c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043b  00000000  00000000  0000d85b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000dc96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__vector_2>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ea ea       	ldi	r30, 0xAA	; 170
 21c:	f4 e0       	ldi	r31, 0x04	; 4
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	ac 31       	cpi	r26, 0x1C	; 28
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	20 e2       	ldi	r18, 0x20	; 32
 232:	ac e1       	ldi	r26, 0x1C	; 28
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	ae 31       	cpi	r26, 0x1E	; 30
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 5d 01 	call	0x2ba	; 0x2ba <main>
 244:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <accel_read>:
extern const uint8_t PMIC_CTRL_CONFIG;
extern const uint8_t PORTC_DIRCLR_CONFIG;

/* your lsm330 function definitions here */
//Returns a single byte of data that is read from a specific accelerometer register (reg_addr) within the LSM330.s
uint8_t accel_read(uint8_t reg_addr){
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
	//Select accel
	PORTF.OUTCLR = SA;	//SA enable
 252:	c0 ea       	ldi	r28, 0xA0	; 160
 254:	d6 e0       	ldi	r29, 0x06	; 6
 256:	18 e0       	ldi	r17, 0x08	; 8
 258:	1e 83       	std	Y+6, r17	; 0x06
	
	//Address OR with READ CYCLE enable
	spif_write( (reg_addr | READ) );
 25a:	80 68       	ori	r24, 0x80	; 128
 25c:	0e 94 0b 02 	call	0x416	; 0x416 <spif_write>
	uint8_t value = spif_read();
 260:	0e 94 19 02 	call	0x432	; 0x432 <spif_read>
	
	PORTF.OUTSET = SA;	//SA disable
 264:	1d 83       	std	Y+5, r17	; 0x05
	
	return(value);
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	08 95       	ret

0000026e <accel_write>:

//Writes a single byte of data (data) to a specific accelerometer register (reg_addr) within the LSM330.
void accel_write(uint8_t reg_addr, uint8_t data){
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	06 2f       	mov	r16, r22
	//Select accel
	PORTF.OUTCLR = SA;	//SA enable
 278:	c0 ea       	ldi	r28, 0xA0	; 160
 27a:	d6 e0       	ldi	r29, 0x06	; 6
 27c:	18 e0       	ldi	r17, 0x08	; 8
 27e:	1e 83       	std	Y+6, r17	; 0x06
	
	//Write reg address then data
	spif_write(reg_addr);
 280:	0e 94 0b 02 	call	0x416	; 0x416 <spif_write>
	spif_write(data);
 284:	80 2f       	mov	r24, r16
 286:	0e 94 0b 02 	call	0x416	; 0x416 <spif_write>

	PORTF.OUTSET = SA;	//SA disable
 28a:	1d 83       	std	Y+5, r17	; 0x05
	
	return;
}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	08 95       	ret

00000296 <accel_init>:

void accel_init(void){	
	//Set up interrupt
	//Input
	PORTC.DIRCLR = PIN7_bm;
 296:	e0 e4       	ldi	r30, 0x40	; 64
 298:	f6 e0       	ldi	r31, 0x06	; 6
 29a:	80 e8       	ldi	r24, 0x80	; 128
 29c:	82 83       	std	Z+2, r24	; 0x02
	//Low Level
	PORTC.INTCTRL = PORTC_INTCTRL_CONFIG;
 29e:	93 e0       	ldi	r25, 0x03	; 3
 2a0:	91 87       	std	Z+9, r25	; 0x09
	// Port c pin 7 is interrupt source
	PORTC.INT0MASK = PORTC_INT0MASK_CONFIG;
 2a2:	82 87       	std	Z+10, r24	; 0x0a
	//Rising edge
	PORTC.PIN7CTRL = PORTC_PIN7CTRL_CONFIG;
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	87 8b       	std	Z+23, r24	; 0x17

	//Reset CTRL_REG4_A, enable interrupt, active high interrupt
	//Int1 connects to pc7, need to config external interrupt.
	accel_write(CTRL_REG4_A, 0xC8);
 2a8:	68 ec       	ldi	r22, 0xC8	; 200
 2aa:	83 e2       	ldi	r24, 0x23	; 35
 2ac:	0e 94 37 01 	call	0x26e	; 0x26e <accel_write>

	//Enable accelerometer to measure all 3 dimensions simultaneously and config measurements rate at 1600Hz
	accel_write(CTRL_REG5_A, 0x97);
 2b0:	67 e9       	ldi	r22, 0x97	; 151
 2b2:	80 e2       	ldi	r24, 0x20	; 32
 2b4:	0e 94 37 01 	call	0x26e	; 0x26e <accel_write>
 2b8:	08 95       	ret

000002ba <main>:
//ISR global flag
volatile int accel_flag = 0;

int main(void){
	//Initialize SPI
	spif_init();
 2ba:	0e 94 ff 01 	call	0x3fe	; 0x3fe <spif_init>
	//Initialize USART
	usartd0_init();
 2be:	0e 94 2a 02 	call	0x454	; 0x454 <usartd0_init>
	//Initialize External Interrupt and the Accelerometer
	accel_init();
 2c2:	0e 94 4b 01 	call	0x296	; 0x296 <accel_init>
	
	//Turn on low level interrupts
	PMIC.CTRL=0x07;
 2c6:	87 e0       	ldi	r24, 0x07	; 7
 2c8:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	//Turn on global interrupts
	sei();
 2cc:	78 94       	sei
	lsm330_data_t lsm_data;
	
	uint8_t f =0;
	uint8_t b = 0;
	uint8_t l = 0;
	uint8_t r = 0;
 2ce:	d0 e0       	ldi	r29, 0x00	; 0
	// This type is a union that will allow you to access the data read from the LSM330 in a much easier way. 
	lsm330_data_t lsm_data;
	
	uint8_t f =0;
	uint8_t b = 0;
	uint8_t l = 0;
 2d0:	c0 e0       	ldi	r28, 0x00	; 0
	
	// This type is a union that will allow you to access the data read from the LSM330 in a much easier way. 
	lsm330_data_t lsm_data;
	
	uint8_t f =0;
	uint8_t b = 0;
 2d2:	00 e0       	ldi	r16, 0x00	; 0
	sei();
	
	// This type is a union that will allow you to access the data read from the LSM330 in a much easier way. 
	lsm330_data_t lsm_data;
	
	uint8_t f =0;
 2d4:	10 e0       	ldi	r17, 0x00	; 0
	char* three = "forward";
	char* four = "backward";
	//Loop always
	while(1){
		//Check on global flag
		if(accel_flag){
 2d6:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <__data_end>
 2da:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <__data_end+0x1>
 2de:	89 2b       	or	r24, r25
 2e0:	d1 f3       	breq	.-12     	; 0x2d6 <main+0x1c>
			if (accel_read(OUT_X_L_A)>0 && l ==0){
 2e2:	88 e2       	ldi	r24, 0x28	; 40
 2e4:	0e 94 26 01 	call	0x24c	; 0x24c <accel_read>
 2e8:	88 23       	and	r24, r24
 2ea:	81 f0       	breq	.+32     	; 0x30c <main+0x52>
 2ec:	c1 11       	cpse	r28, r1
 2ee:	0e c0       	rjmp	.+28     	; 0x30c <main+0x52>
			//Read -> Output XL
			lsm_data.byte.accel_x_low = accel_read(OUT_X_L_A);
 2f0:	88 e2       	ldi	r24, 0x28	; 40
 2f2:	0e 94 26 01 	call	0x24c	; 0x24c <accel_read>
			usartd0_out_string(one);
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e2       	ldi	r25, 0x20	; 32
 2fa:	0e 94 44 02 	call	0x488	; 0x488 <usartd0_out_string>
				f=0;
				b = 0;
				l = 1;
				r = 0;
			}
			if(accel_read(OUT_X_H_A)>0 && r == 0){
 2fe:	89 e2       	ldi	r24, 0x29	; 41
 300:	0e 94 26 01 	call	0x24c	; 0x24c <accel_read>
 304:	88 23       	and	r24, r24
 306:	09 f4       	brne	.+2      	; 0x30a <main+0x50>
 308:	44 c0       	rjmp	.+136    	; 0x392 <main+0xd8>
 30a:	07 c0       	rjmp	.+14     	; 0x31a <main+0x60>
 30c:	89 e2       	ldi	r24, 0x29	; 41
 30e:	0e 94 26 01 	call	0x24c	; 0x24c <accel_read>
 312:	88 23       	and	r24, r24
 314:	79 f0       	breq	.+30     	; 0x334 <main+0x7a>
 316:	d1 11       	cpse	r29, r1
 318:	0d c0       	rjmp	.+26     	; 0x334 <main+0x7a>
			//Read -> Output XH
			lsm_data.byte.accel_x_high = accel_read(OUT_X_H_A);
 31a:	89 e2       	ldi	r24, 0x29	; 41
 31c:	0e 94 26 01 	call	0x24c	; 0x24c <accel_read>
			usartd0_out_string(two);
 320:	85 e0       	ldi	r24, 0x05	; 5
 322:	90 e2       	ldi	r25, 0x20	; 32
 324:	0e 94 44 02 	call	0x488	; 0x488 <usartd0_out_string>
				f=0;
				b = 0;
				l = 0;
				r = 1;
			}
			if(accel_read(OUT_Y_L_A)>0 && b==0){
 328:	8a e2       	ldi	r24, 0x2A	; 42
 32a:	0e 94 26 01 	call	0x24c	; 0x24c <accel_read>
 32e:	88 23       	and	r24, r24
 330:	d1 f1       	breq	.+116    	; 0x3a6 <main+0xec>
 332:	07 c0       	rjmp	.+14     	; 0x342 <main+0x88>
 334:	8a e2       	ldi	r24, 0x2A	; 42
 336:	0e 94 26 01 	call	0x24c	; 0x24c <accel_read>
 33a:	88 23       	and	r24, r24
 33c:	99 f0       	breq	.+38     	; 0x364 <main+0xaa>
 33e:	01 11       	cpse	r16, r1
 340:	11 c0       	rjmp	.+34     	; 0x364 <main+0xaa>
			//Read -> Output YL
			lsm_data.byte.accel_y_low = accel_read(OUT_Y_L_A);
 342:	8a e2       	ldi	r24, 0x2A	; 42
 344:	0e 94 26 01 	call	0x24c	; 0x24c <accel_read>
			usartd0_out_string(four);
 348:	8b e0       	ldi	r24, 0x0B	; 11
 34a:	90 e2       	ldi	r25, 0x20	; 32
 34c:	0e 94 44 02 	call	0x488	; 0x488 <usartd0_out_string>
				f=0;
				b = 1;
				l = 0;
				r = 0;
			}
					if(accel_read(OUT_Y_H_A) && f==0){
 350:	8b e2       	ldi	r24, 0x2B	; 43
 352:	0e 94 26 01 	call	0x24c	; 0x24c <accel_read>
 356:	81 11       	cpse	r24, r1
 358:	0c c0       	rjmp	.+24     	; 0x372 <main+0xb8>
			lsm_data.byte.accel_y_low = accel_read(OUT_Y_L_A);
			usartd0_out_string(four);
				f=0;
				b = 1;
				l = 0;
				r = 0;
 35a:	d0 e0       	ldi	r29, 0x00	; 0
			//Read -> Output YL
			lsm_data.byte.accel_y_low = accel_read(OUT_Y_L_A);
			usartd0_out_string(four);
				f=0;
				b = 1;
				l = 0;
 35c:	c0 e0       	ldi	r28, 0x00	; 0
			if(accel_read(OUT_Y_L_A)>0 && b==0){
			//Read -> Output YL
			lsm_data.byte.accel_y_low = accel_read(OUT_Y_L_A);
			usartd0_out_string(four);
				f=0;
				b = 1;
 35e:	01 e0       	ldi	r16, 0x01	; 1
			}
			if(accel_read(OUT_Y_L_A)>0 && b==0){
			//Read -> Output YL
			lsm_data.byte.accel_y_low = accel_read(OUT_Y_L_A);
			usartd0_out_string(four);
				f=0;
 360:	10 e0       	ldi	r17, 0x00	; 0
 362:	12 c0       	rjmp	.+36     	; 0x388 <main+0xce>
				b = 1;
				l = 0;
				r = 0;
			}
					if(accel_read(OUT_Y_H_A) && f==0){
 364:	8b e2       	ldi	r24, 0x2B	; 43
 366:	0e 94 26 01 	call	0x24c	; 0x24c <accel_read>
 36a:	88 23       	and	r24, r24
 36c:	69 f0       	breq	.+26     	; 0x388 <main+0xce>
 36e:	11 11       	cpse	r17, r1
 370:	0b c0       	rjmp	.+22     	; 0x388 <main+0xce>
			//Read -> Output YL
			lsm_data.byte.accel_y_high = accel_read(OUT_Y_H_A);
 372:	8b e2       	ldi	r24, 0x2B	; 43
 374:	0e 94 26 01 	call	0x24c	; 0x24c <accel_read>
			usartd0_out_string(three);
 378:	84 e1       	ldi	r24, 0x14	; 20
 37a:	90 e2       	ldi	r25, 0x20	; 32
 37c:	0e 94 44 02 	call	0x488	; 0x488 <usartd0_out_string>
							f=1;
				b = 0;
				l = 0;
				r = 0;
 380:	d0 e0       	ldi	r29, 0x00	; 0
			//Read -> Output YL
			lsm_data.byte.accel_y_high = accel_read(OUT_Y_H_A);
			usartd0_out_string(three);
							f=1;
				b = 0;
				l = 0;
 382:	c0 e0       	ldi	r28, 0x00	; 0
					if(accel_read(OUT_Y_H_A) && f==0){
			//Read -> Output YL
			lsm_data.byte.accel_y_high = accel_read(OUT_Y_H_A);
			usartd0_out_string(three);
							f=1;
				b = 0;
 384:	00 e0       	ldi	r16, 0x00	; 0
			}
					if(accel_read(OUT_Y_H_A) && f==0){
			//Read -> Output YL
			lsm_data.byte.accel_y_high = accel_read(OUT_Y_H_A);
			usartd0_out_string(three);
							f=1;
 386:	11 e0       	ldi	r17, 0x01	; 1

			//Read -> Output ZH
			lsm_data.byte.accel_z_high = accel_read(OUT_Z_H_A);
			usartd0_out_char((char) lsm_data.byte.accel_z_high);*/
			//Reset Flag
			accel_flag = 0;
 388:	10 92 1c 20 	sts	0x201C, r1	; 0x80201c <__data_end>
 38c:	10 92 1d 20 	sts	0x201D, r1	; 0x80201d <__data_end+0x1>
 390:	a2 cf       	rjmp	.-188    	; 0x2d6 <main+0x1c>
				f=0;
				b = 0;
				l = 0;
				r = 1;
			}
			if(accel_read(OUT_Y_L_A)>0 && b==0){
 392:	8a e2       	ldi	r24, 0x2A	; 42
 394:	0e 94 26 01 	call	0x24c	; 0x24c <accel_read>
 398:	81 11       	cpse	r24, r1
 39a:	d3 cf       	rjmp	.-90     	; 0x342 <main+0x88>
			lsm_data.byte.accel_x_low = accel_read(OUT_X_L_A);
			usartd0_out_string(one);
				f=0;
				b = 0;
				l = 1;
				r = 0;
 39c:	d0 e0       	ldi	r29, 0x00	; 0
			//Read -> Output XL
			lsm_data.byte.accel_x_low = accel_read(OUT_X_L_A);
			usartd0_out_string(one);
				f=0;
				b = 0;
				l = 1;
 39e:	c1 e0       	ldi	r28, 0x01	; 1
			if (accel_read(OUT_X_L_A)>0 && l ==0){
			//Read -> Output XL
			lsm_data.byte.accel_x_low = accel_read(OUT_X_L_A);
			usartd0_out_string(one);
				f=0;
				b = 0;
 3a0:	00 e0       	ldi	r16, 0x00	; 0
		if(accel_flag){
			if (accel_read(OUT_X_L_A)>0 && l ==0){
			//Read -> Output XL
			lsm_data.byte.accel_x_low = accel_read(OUT_X_L_A);
			usartd0_out_string(one);
				f=0;
 3a2:	10 e0       	ldi	r17, 0x00	; 0
 3a4:	df cf       	rjmp	.-66     	; 0x364 <main+0xaa>
				f=0;
				b = 1;
				l = 0;
				r = 0;
			}
					if(accel_read(OUT_Y_H_A) && f==0){
 3a6:	8b e2       	ldi	r24, 0x2B	; 43
 3a8:	0e 94 26 01 	call	0x24c	; 0x24c <accel_read>
 3ac:	81 11       	cpse	r24, r1
 3ae:	e1 cf       	rjmp	.-62     	; 0x372 <main+0xb8>
			lsm_data.byte.accel_x_high = accel_read(OUT_X_H_A);
			usartd0_out_string(two);
				f=0;
				b = 0;
				l = 0;
				r = 1;
 3b0:	d1 e0       	ldi	r29, 0x01	; 1
			//Read -> Output XH
			lsm_data.byte.accel_x_high = accel_read(OUT_X_H_A);
			usartd0_out_string(two);
				f=0;
				b = 0;
				l = 0;
 3b2:	c0 e0       	ldi	r28, 0x00	; 0
			if(accel_read(OUT_X_H_A)>0 && r == 0){
			//Read -> Output XH
			lsm_data.byte.accel_x_high = accel_read(OUT_X_H_A);
			usartd0_out_string(two);
				f=0;
				b = 0;
 3b4:	00 e0       	ldi	r16, 0x00	; 0
			}
			if(accel_read(OUT_X_H_A)>0 && r == 0){
			//Read -> Output XH
			lsm_data.byte.accel_x_high = accel_read(OUT_X_H_A);
			usartd0_out_string(two);
				f=0;
 3b6:	10 e0       	ldi	r17, 0x00	; 0
 3b8:	e7 cf       	rjmp	.-50     	; 0x388 <main+0xce>

000003ba <__vector_2>:
		}
	}
	return 0;
}

ISR(PORTC_INT0_vect){
 3ba:	1f 92       	push	r1
 3bc:	0f 92       	push	r0
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	0f 92       	push	r0
 3c2:	11 24       	eor	r1, r1
 3c4:	08 b6       	in	r0, 0x38	; 56
 3c6:	0f 92       	push	r0
 3c8:	18 be       	out	0x38, r1	; 56
 3ca:	2f 93       	push	r18
 3cc:	3f 93       	push	r19
 3ce:	8f 93       	push	r24
 3d0:	9f 93       	push	r25
	//Push Status Registers
	uint8_t status = CPU_SREG;
 3d2:	8f b7       	in	r24, 0x3f	; 63

	//Set interrupt flags
	PORTC.INTFLAGS = 0x01;
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	90 93 4c 06 	sts	0x064C, r25	; 0x80064c <__TEXT_REGION_LENGTH__+0x70064c>

	//Set global variable
	accel_flag = 1;
 3da:	21 e0       	ldi	r18, 0x01	; 1
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	20 93 1c 20 	sts	0x201C, r18	; 0x80201c <__data_end>
 3e2:	30 93 1d 20 	sts	0x201D, r19	; 0x80201d <__data_end+0x1>
	
	//Pop Status Reg
	CPU_SREG = status;
 3e6:	8f bf       	out	0x3f, r24	; 63

	return;
 3e8:	9f 91       	pop	r25
 3ea:	8f 91       	pop	r24
 3ec:	3f 91       	pop	r19
 3ee:	2f 91       	pop	r18
 3f0:	0f 90       	pop	r0
 3f2:	08 be       	out	0x38, r0	; 56
 3f4:	0f 90       	pop	r0
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	0f 90       	pop	r0
 3fa:	1f 90       	pop	r1
 3fc:	18 95       	reti

000003fe <spif_init>:
;*********************************INCLUDES**************************************/
//******************************END OF INCLUDES*********************************
/* initializes the SPI module of Port F to communicate with the LSM330 */
void spif_init(void){
  /* configure pin direction of SPI signals */
    PORTF.OUTSET = MOSI | SA | SS;		//Set initial output high.
 3fe:	e0 ea       	ldi	r30, 0xA0	; 160
 400:	f6 e0       	ldi	r31, 0x06	; 6
 402:	8c e2       	ldi	r24, 0x2C	; 44
 404:	85 83       	std	Z+5, r24	; 0x05
    PORTF.DIRSET = MOSI | SCK | SA | SS;	//Output
 406:	8c ea       	ldi	r24, 0xAC	; 172
 408:	81 83       	std	Z+1, r24	; 0x01
    PORTF.DIRCLR = MISO;	//Input
 40a:	80 e4       	ldi	r24, 0x40	; 64
 40c:	82 83       	std	Z+2, r24	; 0x02

	/* 8 MHz SPI frequency since 10MHz is the maximum allowed by the LSM330 */
	SPIF.CTRL =	SPI_PRESCALER_DIV4_gc	|	SPI_MASTER_bm	|	SPI_MODE_3_gc	|	SPI_ENABLE_bm;
 40e:	8c e5       	ldi	r24, 0x5C	; 92
 410:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <__TEXT_REGION_LENGTH__+0x700bc0>
 414:	08 95       	ret

00000416 <spif_write>:
}

/* writes a single byte of data to the SPIF data register */
void spif_write(uint8_t data){
	//Enable Slave port f pin 4
	PORTF.OUTTGL = BIT4;
 416:	90 e1       	ldi	r25, 0x10	; 16
 418:	90 93 a7 06 	sts	0x06A7, r25	; 0x8006a7 <__TEXT_REGION_LENGTH__+0x7006a7>
	
	SPIF.DATA = data;
 41c:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x700bc3>
	while((SPIF.STATUS & 0x80) != 0x80);	/* wait for transfer to be complete */
 420:	e0 ec       	ldi	r30, 0xC0	; 192
 422:	fb e0       	ldi	r31, 0x0B	; 11
 424:	82 81       	ldd	r24, Z+2	; 0x02
 426:	88 23       	and	r24, r24
 428:	ec f7       	brge	.-6      	; 0x424 <spif_write+0xe>
	
	//Turn off slave select
	PORTF.OUTTGL = BIT4;
 42a:	80 e1       	ldi	r24, 0x10	; 16
 42c:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <__TEXT_REGION_LENGTH__+0x7006a7>
 430:	08 95       	ret

00000432 <spif_read>:
}

/* attempts to read a byte of data from device connected to SPIF */
uint8_t spif_read(void){
  PORTF.OUTTGL = BIT4;
 432:	80 e1       	ldi	r24, 0x10	; 16
 434:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <__TEXT_REGION_LENGTH__+0x7006a7>
  
  SPIF.DATA = 0x37;                   /* write garbage to cause transaction */
 438:	87 e3       	ldi	r24, 0x37	; 55
 43a:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x700bc3>
  while((SPIF.STATUS & 0x80) != 0x80);	/* wait for transfer to be complete */
 43e:	e0 ec       	ldi	r30, 0xC0	; 192
 440:	fb e0       	ldi	r31, 0x0B	; 11
 442:	82 81       	ldd	r24, Z+2	; 0x02
 444:	88 23       	and	r24, r24
 446:	ec f7       	brge	.-6      	; 0x442 <spif_read+0x10>
  
  PORTF.OUTTGL = BIT4;
 448:	80 e1       	ldi	r24, 0x10	; 16
 44a:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <__TEXT_REGION_LENGTH__+0x7006a7>
  
  return SPIF.DATA;	
 44e:	80 91 c3 0b 	lds	r24, 0x0BC3	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x700bc3>
 452:	08 95       	ret

00000454 <usartd0_init>:
#include <avr/io.h>

//USART Initialization
void usartd0_init(void){
	//Configure TxD and RxD pins
	PORTD.OUTSET = PIN3_bm;
 454:	e0 e6       	ldi	r30, 0x60	; 96
 456:	f6 e0       	ldi	r31, 0x06	; 6
 458:	88 e0       	ldi	r24, 0x08	; 8
 45a:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRSET = PIN3_bm;
 45c:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 45e:	84 e0       	ldi	r24, 0x04	; 4
 460:	82 83       	std	Z+2, r24	; 0x02
	
	//Baud rate: At 2 MHz, 150 BSEL, -7 BSCALE corresponds to 57600 bps */
	USARTD0.BAUDCTRLA = (uint8_t)150;
 462:	e0 ea       	ldi	r30, 0xA0	; 160
 464:	f9 e0       	ldi	r31, 0x09	; 9
 466:	86 e9       	ldi	r24, 0x96	; 150
 468:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)( (-7 << 4) | (150 >> 8) );
 46a:	80 e9       	ldi	r24, 0x90	; 144
 46c:	87 83       	std	Z+7, r24	; 0x07

	//8 data bits, no parity, and one stop bit.
	USARTD0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc & ~USART_SBMODE_bm;
 46e:	83 e0       	ldi	r24, 0x03	; 3
 470:	85 83       	std	Z+5, r24	; 0x05

	//Enable Receiver and/or Transmitter
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 472:	88 e1       	ldi	r24, 0x18	; 24
 474:	84 83       	std	Z+4, r24	; 0x04
 476:	08 95       	ret

00000478 <usartd0_out_char>:
}

//Output character
void usartd0_out_char(char output){
	//Wait till transmission is done
	while(!(USARTD0.STATUS & USART_DREIF_bm));
 478:	e0 ea       	ldi	r30, 0xA0	; 160
 47a:	f9 e0       	ldi	r31, 0x09	; 9
 47c:	91 81       	ldd	r25, Z+1	; 0x01
 47e:	95 ff       	sbrs	r25, 5
 480:	fd cf       	rjmp	.-6      	; 0x47c <usartd0_out_char+0x4>
	USARTD0.DATA = output;	//output c
 482:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 486:	08 95       	ret

00000488 <usartd0_out_string>:
}

//Output string
void usartd0_out_string(char *str){
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	ec 01       	movw	r28, r24
	//Loop char pointer to get string
	while(*str){
 48e:	88 81       	ld	r24, Y
 490:	88 23       	and	r24, r24
 492:	31 f0       	breq	.+12     	; 0x4a0 <usartd0_out_string+0x18>
 494:	21 96       	adiw	r28, 0x01	; 1
		usartd0_out_char(*(str++));	//Output string
 496:	0e 94 3c 02 	call	0x478	; 0x478 <usartd0_out_char>
}

//Output string
void usartd0_out_string(char *str){
	//Loop char pointer to get string
	while(*str){
 49a:	89 91       	ld	r24, Y+
 49c:	81 11       	cpse	r24, r1
 49e:	fb cf       	rjmp	.-10     	; 0x496 <usartd0_out_string+0xe>
		usartd0_out_char(*(str++));	//Output string
	}
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	08 95       	ret

000004a6 <_exit>:
 4a6:	f8 94       	cli

000004a8 <__stop_program>:
 4a8:	ff cf       	rjmp	.-2      	; 0x4a8 <__stop_program>
