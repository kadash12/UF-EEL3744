
Lab8_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000440  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000200  00802000  00000440  000004b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000728  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005096  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003c9e  00000000  00000000  00005816  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000656  00000000  00000000  000094b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00009b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00004698  00000000  00000000  00009ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f8  00000000  00000000  0000e238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000e330  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  24:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  38:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  58:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  68:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  6c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  70:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  74:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  78:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  7c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  80:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  84:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  88:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  8c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  90:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  94:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  98:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  9c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  fc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 100:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 104:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 108:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 10c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 110:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 114:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 118:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 11c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 120:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 124:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 128:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 12c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 130:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 134:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 138:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 13c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 140:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 144:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 148:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 14c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 150:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 154:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 158:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 15c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 160:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 164:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 168:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 16c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 170:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 174:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 178:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 17c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 180:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 184:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 188:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 18c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 190:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 194:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 198:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 19c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	12 e2       	ldi	r17, 0x22	; 34
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e0 e4       	ldi	r30, 0x40	; 64
 21c:	f4 e0       	ldi	r31, 0x04	; 4
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 30       	cpi	r26, 0x00	; 0
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59
 230:	0e 94 70 01 	call	0x2e0	; 0x2e0 <main>
 234:	0c 94 1e 02 	jmp	0x43c	; 0x43c <_exit>

00000238 <__bad_interrupt>:
 238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <clock_init>:

 .section .text

 .global clock_init
 clock_init:
	push r24
 23c:	8f 93       	push	r24

	ldi r24, OSC_RC32MEN_bm
 23e:	82 e0       	ldi	r24, 0x02	; 2
	sts OSC_CTRL, R24		;Enables the 32MHz internal oscillator
 240:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>

00000244 <check32MHzStatus>:

check32MHzStatus:
	lds	r24, OSC_STATUS
 244:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	;Ensure that the 32MHz clock is ready before proceeding
	sbrs r24, OSC_RC32MRDY_bp
 248:	81 ff       	sbrs	r24, 1
	rjmp check32MHzStatus
 24a:	fc cf       	rjmp	.-8      	; 0x244 <check32MHzStatus>

	;Writing to CCP disables interrupts for a certain number of cycles
	;to give the clock time to switch sources. It also enables writes to certain registers.
	ldi r24, 0xD8
 24c:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r24				
 24e:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>

	;Finally, select the now-ready 32MHz oscillator as the new clock source. 
	ldi	r24, 0x01
 252:	81 e0       	ldi	r24, 0x01	; 1
	sts CLK_CTRL, r24
 254:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>

00000258 <skip32MHZ_enable>:
skip32MHZ_enable:
	;CPU CLK prescaler settings 
	;Use values that are powers of 2 from 1 to 512 (1, 2, 4, 8, 16, ..., 512) for A. See Table 7-2 in the manual. 
	;You can also change B/C. See Table 7-3 in the manual. 

	ldi r24, 0xD8
 258:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r24
 25a:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	
	ldi r24, ((0x00 << 2) | (0x00 << 0))	;32MHz
 25e:	80 e0       	ldi	r24, 0x00	; 0
	;ldi r24, (CLK_PSADIV_4_gc | CLK_PSBCDIV_1_1_gc) ;8MHz

	sts CLK_PSCTRL, r24
 260:	80 93 41 00 	sts	0x0041, r24	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>

	pop r24
 264:	8f 91       	pop	r24

 266:	08 95       	ret

00000268 <DAC_init>:
	0x4f0,0x51f,0x54e,0x57d,0x5ad,0x5dd,0x60e,0x63f,
	0x670,0x6a1,0x6d3,0x705,0x737,0x769,0x79b,0x7cd
};

//Initialize DAC
void DAC_init(void){
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
	PORTA_DIRSET = PIN3_bm;	//Output
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	96 e0       	ldi	r25, 0x06	; 6
 274:	28 e0       	ldi	r18, 0x08	; 8
 276:	fc 01       	movw	r30, r24
 278:	20 83       	st	Z, r18
	//Default 1V
	//CH1 enable and DAC enable
	DACA_CTRLA = DAC_CH1EN_bm | DAC_ENABLE_bm;
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	93 e0       	ldi	r25, 0x03	; 3
 27e:	29 e0       	ldi	r18, 0x09	; 9
 280:	fc 01       	movw	r30, r24
 282:	20 83       	st	Z, r18
	DACA_CTRLB = 0x20;
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	93 e0       	ldi	r25, 0x03	; 3
 288:	20 e2       	ldi	r18, 0x20	; 32
 28a:	fc 01       	movw	r30, r24
 28c:	20 83       	st	Z, r18
	//AREFB
	DACA_CTRLC = DAC_REFSEL_AREFB_gc;
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	93 e0       	ldi	r25, 0x03	; 3
 292:	28 e1       	ldi	r18, 0x18	; 24
 294:	fc 01       	movw	r30, r24
 296:	20 83       	st	Z, r18
}
 298:	00 00       	nop
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <tcc0_init>:

//Initialize TCC0 timer/counter
void tcc0_init(void){
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
	TCC0.CNT = 0; //Initial value 0
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	98 e0       	ldi	r25, 0x08	; 8
 2ac:	fc 01       	movw	r30, r24
 2ae:	10 a2       	std	Z+32, r1	; 0x20
 2b0:	11 a2       	std	Z+33, r1	; 0x21
	
	TCC0_PERL = (uint8_t) period;	//Period
 2b2:	86 e2       	ldi	r24, 0x26	; 38
 2b4:	98 e0       	ldi	r25, 0x08	; 8
 2b6:	27 e4       	ldi	r18, 0x47	; 71
 2b8:	fc 01       	movw	r30, r24
 2ba:	20 83       	st	Z, r18
	TCC0_PERH = (uint8_t) (period>>8);
 2bc:	87 e2       	ldi	r24, 0x27	; 39
 2be:	98 e0       	ldi	r25, 0x08	; 8
 2c0:	fc 01       	movw	r30, r24
 2c2:	10 82       	st	Z, r1
	//TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc;	//Low level interrupt
	EVSYS_CH1MUX = EVSYS_CHMUX_TCC0_OVF_gc;
 2c4:	81 e8       	ldi	r24, 0x81	; 129
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	20 ec       	ldi	r18, 0xC0	; 192
 2ca:	fc 01       	movw	r30, r24
 2cc:	20 83       	st	Z, r18

	TCC0_CTRLA = 0x01;	//Prescaler = 1
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	98 e0       	ldi	r25, 0x08	; 8
 2d2:	21 e0       	ldi	r18, 0x01	; 1
 2d4:	fc 01       	movw	r30, r24
 2d6:	20 83       	st	Z, r18
}
 2d8:	00 00       	nop
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <main>:
	CPU_SREG = temp;
	//Return from ISR
	return;
}*/

int main(void){
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	cd b7       	in	r28, 0x3d	; 61
 2e6:	de b7       	in	r29, 0x3e	; 62
	//Initialization
	clock_init();
 2e8:	0e 94 1e 01 	call	0x23c	; 0x23c <clock_init>
	DAC_init();
 2ec:	0e 94 34 01 	call	0x268	; 0x268 <DAC_init>
	tcc0_init();
 2f0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <tcc0_init>
	DMA_init();
 2f4:	0e 94 8b 01 	call	0x316	; 0x316 <DMA_init>
	
	//Enabled interrupts
	//PMIC_CTRL = PMIC_LOLVLEN_bm;	//Low level interrupts
	//sei();	//global interrupt
	
	PORTC_DIRSET |= PIN7_bm;	//enable_speaker
 2f8:	81 e4       	ldi	r24, 0x41	; 65
 2fa:	96 e0       	ldi	r25, 0x06	; 6
 2fc:	21 e4       	ldi	r18, 0x41	; 65
 2fe:	36 e0       	ldi	r19, 0x06	; 6
 300:	f9 01       	movw	r30, r18
 302:	20 81       	ld	r18, Z
 304:	20 68       	ori	r18, 0x80	; 128
 306:	fc 01       	movw	r30, r24
 308:	20 83       	st	Z, r18
	PORTC_OUTSET = PIN7_bm;
 30a:	85 e4       	ldi	r24, 0x45	; 69
 30c:	96 e0       	ldi	r25, 0x06	; 6
 30e:	20 e8       	ldi	r18, 0x80	; 128
 310:	fc 01       	movw	r30, r24
 312:	20 83       	st	Z, r18
	
	while (1){}
 314:	ff cf       	rjmp	.-2      	; 0x314 <main+0x34>

00000316 <DMA_init>:
	return 0;
}

//Initialize DMA
void DMA_init(){
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	2a 97       	sbiw	r28, 0x0a	; 10
 320:	cd bf       	out	0x3d, r28	; 61
 322:	de bf       	out	0x3e, r29	; 62
	uint32_t sine = (uint32_t)sin;
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	90 e2       	ldi	r25, 0x20	; 32
 328:	09 2e       	mov	r0, r25
 32a:	00 0c       	add	r0, r0
 32c:	aa 0b       	sbc	r26, r26
 32e:	bb 0b       	sbc	r27, r27
 330:	89 83       	std	Y+1, r24	; 0x01
 332:	9a 83       	std	Y+2, r25	; 0x02
 334:	ab 83       	std	Y+3, r26	; 0x03
 336:	bc 83       	std	Y+4, r27	; 0x04
	
	//Reset DMA
	DMA.CTRL |= DMA_RESET_bm;
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	20 e0       	ldi	r18, 0x00	; 0
 33e:	31 e0       	ldi	r19, 0x01	; 1
 340:	f9 01       	movw	r30, r18
 342:	20 81       	ld	r18, Z
 344:	20 64       	ori	r18, 0x40	; 64
 346:	fc 01       	movw	r30, r24
 348:	20 83       	st	Z, r18
	
	//Increment the source after transfer
	//Increment the destination after received
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BLOCK_gc|DMA_CH_SRCDIR_INC_gc|DMA_CH_DESTRELOAD_BURST_gc|DMA_CH_DESTDIR_INC_gc;
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	29 e5       	ldi	r18, 0x59	; 89
 350:	fc 01       	movw	r30, r24
 352:	22 8b       	std	Z+18, r18	; 0x12
	//Transfer data when TCE0 overflows
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_TCC0_OVF_gc;
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	20 e4       	ldi	r18, 0x40	; 64
 35a:	fc 01       	movw	r30, r24
 35c:	23 8b       	std	Z+19, r18	; 0x13
	//Byte transfers in a block transfer
	DMA.CH0.TRFCNT =512; //512=256(8bit)*2(16bit)
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	20 e0       	ldi	r18, 0x00	; 0
 364:	32 e0       	ldi	r19, 0x02	; 2
 366:	fc 01       	movw	r30, r24
 368:	24 8b       	std	Z+20, r18	; 0x14
 36a:	35 8b       	std	Z+21, r19	; 0x15
	//Unlimited repeats
	DMA.CH0.REPCNT = 0x00;
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	fc 01       	movw	r30, r24
 372:	16 8a       	std	Z+22, r1	; 0x16

	//Starting address of the source
	DMA.CH0.SRCADDR0 = (uint8_t)(sine>>0);
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	29 81       	ldd	r18, Y+1	; 0x01
 37a:	fc 01       	movw	r30, r24
 37c:	20 8f       	std	Z+24, r18	; 0x18
	DMA.CH0.SRCADDR1 = (uint8_t)(sine>>8);
 37e:	20 e0       	ldi	r18, 0x00	; 0
 380:	31 e0       	ldi	r19, 0x01	; 1
 382:	89 81       	ldd	r24, Y+1	; 0x01
 384:	9a 81       	ldd	r25, Y+2	; 0x02
 386:	ab 81       	ldd	r26, Y+3	; 0x03
 388:	bc 81       	ldd	r27, Y+4	; 0x04
 38a:	89 2f       	mov	r24, r25
 38c:	9a 2f       	mov	r25, r26
 38e:	ab 2f       	mov	r26, r27
 390:	bb 27       	eor	r27, r27
 392:	f9 01       	movw	r30, r18
 394:	81 8f       	std	Z+25, r24	; 0x19
	DMA.CH0.SRCADDR2 = (uint8_t)(sine>>16);
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	31 e0       	ldi	r19, 0x01	; 1
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	9a 81       	ldd	r25, Y+2	; 0x02
 39e:	ab 81       	ldd	r26, Y+3	; 0x03
 3a0:	bc 81       	ldd	r27, Y+4	; 0x04
 3a2:	cd 01       	movw	r24, r26
 3a4:	aa 27       	eor	r26, r26
 3a6:	bb 27       	eor	r27, r27
 3a8:	f9 01       	movw	r30, r18
 3aa:	82 8f       	std	Z+26, r24	; 0x1a
	
	uint8_t* dac_ptr = &DACA.CH1DATA;
 3ac:	8a e1       	ldi	r24, 0x1A	; 26
 3ae:	93 e0       	ldi	r25, 0x03	; 3
 3b0:	8d 83       	std	Y+5, r24	; 0x05
 3b2:	9e 83       	std	Y+6, r25	; 0x06
	uint32_t dac_address = (uint32_t)dac_ptr;
 3b4:	8d 81       	ldd	r24, Y+5	; 0x05
 3b6:	9e 81       	ldd	r25, Y+6	; 0x06
 3b8:	09 2e       	mov	r0, r25
 3ba:	00 0c       	add	r0, r0
 3bc:	aa 0b       	sbc	r26, r26
 3be:	bb 0b       	sbc	r27, r27
 3c0:	8f 83       	std	Y+7, r24	; 0x07
 3c2:	98 87       	std	Y+8, r25	; 0x08
 3c4:	a9 87       	std	Y+9, r26	; 0x09
 3c6:	ba 87       	std	Y+10, r27	; 0x0a
	//Store data to the DAC
	DMA.CH0.DESTADDR0 = (uint8_t) (dac_address>>0);
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	2f 81       	ldd	r18, Y+7	; 0x07
 3ce:	fc 01       	movw	r30, r24
 3d0:	24 8f       	std	Z+28, r18	; 0x1c
	DMA.CH0.DESTADDR1 = (uint8_t) (dac_address>>8);
 3d2:	20 e0       	ldi	r18, 0x00	; 0
 3d4:	31 e0       	ldi	r19, 0x01	; 1
 3d6:	8f 81       	ldd	r24, Y+7	; 0x07
 3d8:	98 85       	ldd	r25, Y+8	; 0x08
 3da:	a9 85       	ldd	r26, Y+9	; 0x09
 3dc:	ba 85       	ldd	r27, Y+10	; 0x0a
 3de:	89 2f       	mov	r24, r25
 3e0:	9a 2f       	mov	r25, r26
 3e2:	ab 2f       	mov	r26, r27
 3e4:	bb 27       	eor	r27, r27
 3e6:	f9 01       	movw	r30, r18
 3e8:	85 8f       	std	Z+29, r24	; 0x1d
	DMA.CH0.DESTADDR2 = (uint8_t) (dac_address>>16);
 3ea:	20 e0       	ldi	r18, 0x00	; 0
 3ec:	31 e0       	ldi	r19, 0x01	; 1
 3ee:	8f 81       	ldd	r24, Y+7	; 0x07
 3f0:	98 85       	ldd	r25, Y+8	; 0x08
 3f2:	a9 85       	ldd	r26, Y+9	; 0x09
 3f4:	ba 85       	ldd	r27, Y+10	; 0x0a
 3f6:	cd 01       	movw	r24, r26
 3f8:	aa 27       	eor	r26, r26
 3fa:	bb 27       	eor	r27, r27
 3fc:	f9 01       	movw	r30, r18
 3fe:	86 8f       	std	Z+30, r24	; 0x1e
	
	//Enable CHO
	//Unlimited repeat, Data is sent in burst where each burst is 2 bytes long
	DMA.CH0.CTRLA = DMA_CH_REPEAT_bm|DMA_CH_SINGLE_bm|DMA_CH_BURSTLEN_2BYTE_gc;
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	25 e2       	ldi	r18, 0x25	; 37
 406:	fc 01       	movw	r30, r24
 408:	20 8b       	std	Z+16, r18	; 0x10
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	31 e0       	ldi	r19, 0x01	; 1
 412:	f9 01       	movw	r30, r18
 414:	20 89       	ldd	r18, Z+16	; 0x10
 416:	20 68       	ori	r18, 0x80	; 128
 418:	fc 01       	movw	r30, r24
 41a:	20 8b       	std	Z+16, r18	; 0x10
	
	//Enable DMA
	DMA.CTRL |= DMA_ENABLE_bm;
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	20 e0       	ldi	r18, 0x00	; 0
 422:	31 e0       	ldi	r19, 0x01	; 1
 424:	f9 01       	movw	r30, r18
 426:	20 81       	ld	r18, Z
 428:	20 68       	ori	r18, 0x80	; 128
 42a:	fc 01       	movw	r30, r24
 42c:	20 83       	st	Z, r18
 42e:	00 00       	nop
 430:	2a 96       	adiw	r28, 0x0a	; 10
 432:	cd bf       	out	0x3d, r28	; 61
 434:	de bf       	out	0x3e, r29	; 62
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	08 95       	ret

0000043c <_exit>:
 43c:	f8 94       	cli

0000043e <__stop_program>:
 43e:	ff cf       	rjmp	.-2      	; 0x43e <__stop_program>
