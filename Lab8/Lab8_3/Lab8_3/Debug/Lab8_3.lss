
Lab8_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000200  00802000  000004bc  00000530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000760  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000007a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004dfb  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003cb8  00000000  00000000  000055fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000685  00000000  00000000  000092b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00009938  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003aed  00000000  00000000  00009a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019b  00000000  00000000  0000d4fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000d698  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  24:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  38:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__vector_14>
  3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  58:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  68:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  6c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  70:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  74:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  78:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  7c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  80:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  84:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  88:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  8c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  90:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  94:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  98:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  9c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  fc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 100:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 104:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 108:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 10c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 110:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 114:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 118:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 11c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 120:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 124:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 128:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 12c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 130:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 134:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 138:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 13c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 140:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 144:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 148:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 14c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 150:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 154:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 158:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 15c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 160:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 164:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 168:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 16c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 170:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 174:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 178:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 17c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 180:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 184:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 188:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 18c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 190:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 194:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 198:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 19c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	12 e2       	ldi	r17, 0x22	; 34
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ec eb       	ldi	r30, 0xBC	; 188
 21c:	f4 e0       	ldi	r31, 0x04	; 4
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 30       	cpi	r26, 0x00	; 0
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59
 230:	0e 94 b6 01 	call	0x36c	; 0x36c <main>
 234:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <_exit>

00000238 <__bad_interrupt>:
 238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <clock_init>:

 .section .text

 .global clock_init
 clock_init:
	push r24
 23c:	8f 93       	push	r24

	ldi r24, OSC_RC32MEN_bm
 23e:	82 e0       	ldi	r24, 0x02	; 2
	sts OSC_CTRL, R24		;Enables the 32MHz internal oscillator
 240:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>

00000244 <check32MHzStatus>:

check32MHzStatus:
	lds	r24, OSC_STATUS
 244:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	;Ensure that the 32MHz clock is ready before proceeding
	sbrs r24, OSC_RC32MRDY_bp
 248:	81 ff       	sbrs	r24, 1
	rjmp check32MHzStatus
 24a:	fc cf       	rjmp	.-8      	; 0x244 <check32MHzStatus>

	;Writing to CCP disables interrupts for a certain number of cycles
	;to give the clock time to switch sources. It also enables writes to certain registers.
	ldi r24, 0xD8
 24c:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r24				
 24e:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>

	;Finally, select the now-ready 32MHz oscillator as the new clock source. 
	ldi	r24, 0x01
 252:	81 e0       	ldi	r24, 0x01	; 1
	sts CLK_CTRL, r24
 254:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>

00000258 <skip32MHZ_enable>:
skip32MHZ_enable:
	;CPU CLK prescaler settings 
	;Use values that are powers of 2 from 1 to 512 (1, 2, 4, 8, 16, ..., 512) for A. See Table 7-2 in the manual. 
	;You can also change B/C. See Table 7-3 in the manual. 

	ldi r24, 0xD8
 258:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r24
 25a:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	
	ldi r24, ((0x00 << 2) | (0x00 << 0))	;32MHz
 25e:	80 e0       	ldi	r24, 0x00	; 0
	;ldi r24, (CLK_PSADIV_4_gc | CLK_PSBCDIV_1_1_gc) ;8MHz

	sts CLK_PSCTRL, r24
 260:	80 93 41 00 	sts	0x0041, r24	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>

	pop r24
 264:	8f 91       	pop	r24

 266:	08 95       	ret

00000268 <DAC_init>:
	0x4f0,0x51f,0x54e,0x57d,0x5ad,0x5dd,0x60e,0x63f,
	0x670,0x6a1,0x6d3,0x705,0x737,0x769,0x79b,0x7cd
};

//Initialize DAC
void DAC_init(void){
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
	//Default 1V
	//CH1 enable and DAC enable
	DACA_CTRLA = DAC_CH1EN_bm | DAC_ENABLE_bm;
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	93 e0       	ldi	r25, 0x03	; 3
 274:	29 e0       	ldi	r18, 0x09	; 9
 276:	fc 01       	movw	r30, r24
 278:	20 83       	st	Z, r18
	DACA_CTRLB = 0x20;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	93 e0       	ldi	r25, 0x03	; 3
 27e:	20 e2       	ldi	r18, 0x20	; 32
 280:	fc 01       	movw	r30, r24
 282:	20 83       	st	Z, r18
	//AREFB
	DACA_CTRLC = DAC_REFSEL_AREFB_gc;
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	93 e0       	ldi	r25, 0x03	; 3
 288:	28 e1       	ldi	r18, 0x18	; 24
 28a:	fc 01       	movw	r30, r24
 28c:	20 83       	st	Z, r18
	PORTA_DIRSET = PIN3_bm;	//Output
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	96 e0       	ldi	r25, 0x06	; 6
 292:	28 e0       	ldi	r18, 0x08	; 8
 294:	fc 01       	movw	r30, r24
 296:	20 83       	st	Z, r18
}
 298:	00 00       	nop
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <tcc0_init>:

//Initialize TCC0 timer/counter
void tcc0_init(void){
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
	TCC0.CNT = 0; //Initial value 0
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	98 e0       	ldi	r25, 0x08	; 8
 2ac:	fc 01       	movw	r30, r24
 2ae:	10 a2       	std	Z+32, r1	; 0x20
 2b0:	11 a2       	std	Z+33, r1	; 0x21
	
	TCC0_PERL = (uint8_t) period;	//Period
 2b2:	86 e2       	ldi	r24, 0x26	; 38
 2b4:	98 e0       	ldi	r25, 0x08	; 8
 2b6:	27 e4       	ldi	r18, 0x47	; 71
 2b8:	fc 01       	movw	r30, r24
 2ba:	20 83       	st	Z, r18
	TCC0_PERH = (uint8_t) (period>>8);
 2bc:	87 e2       	ldi	r24, 0x27	; 39
 2be:	98 e0       	ldi	r25, 0x08	; 8
 2c0:	fc 01       	movw	r30, r24
 2c2:	10 82       	st	Z, r1
	TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc;	//Low level interrupt
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	98 e0       	ldi	r25, 0x08	; 8
 2c8:	21 e0       	ldi	r18, 0x01	; 1
 2ca:	fc 01       	movw	r30, r24
 2cc:	26 83       	std	Z+6, r18	; 0x06
	
	TCC0_CTRLA = 0x01;	//Prescaler = 1
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	98 e0       	ldi	r25, 0x08	; 8
 2d2:	21 e0       	ldi	r18, 0x01	; 1
 2d4:	fc 01       	movw	r30, r24
 2d6:	20 83       	st	Z, r18
}
 2d8:	00 00       	nop
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <__vector_14>:

ISR(TCC0_OVF_vect){
 2e0:	1f 92       	push	r1
 2e2:	0f 92       	push	r0
 2e4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 2e8:	0f 92       	push	r0
 2ea:	11 24       	eor	r1, r1
 2ec:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 2f0:	0f 92       	push	r0
 2f2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 2f6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 2fa:	0f 92       	push	r0
 2fc:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 300:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 304:	0f 92       	push	r0
 306:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 30a:	2f 93       	push	r18
 30c:	8f 93       	push	r24
 30e:	9f 93       	push	r25
 310:	ef 93       	push	r30
 312:	ff 93       	push	r31
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	1f 92       	push	r1
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
	//Preserve Status Reg
	uint8_t temp = CPU_SREG;
 31e:	8f e3       	ldi	r24, 0x3F	; 63
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	fc 01       	movw	r30, r24
 324:	80 81       	ld	r24, Z
 326:	89 83       	std	Y+1, r24	; 0x01
	
	//Clear interrupt flags
	TCC0.INTFLAGS = 0x01;
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	98 e0       	ldi	r25, 0x08	; 8
 32c:	21 e0       	ldi	r18, 0x01	; 1
 32e:	fc 01       	movw	r30, r24
 330:	24 87       	std	Z+12, r18	; 0x0c
	
	//Restore Status Reg
	CPU_SREG = temp;
 332:	8f e3       	ldi	r24, 0x3F	; 63
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	29 81       	ldd	r18, Y+1	; 0x01
 338:	fc 01       	movw	r30, r24
 33a:	20 83       	st	Z, r18
	//Return from ISR
	return;
 33c:	00 00       	nop
}
 33e:	0f 90       	pop	r0
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	ff 91       	pop	r31
 346:	ef 91       	pop	r30
 348:	9f 91       	pop	r25
 34a:	8f 91       	pop	r24
 34c:	2f 91       	pop	r18
 34e:	0f 90       	pop	r0
 350:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 354:	0f 90       	pop	r0
 356:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 35a:	0f 90       	pop	r0
 35c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 360:	0f 90       	pop	r0
 362:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 366:	0f 90       	pop	r0
 368:	1f 90       	pop	r1
 36a:	18 95       	reti

0000036c <main>:

int main(void){
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
	//Initialization
	clock_init();
 374:	0e 94 1e 01 	call	0x23c	; 0x23c <clock_init>
	DAC_init();
 378:	0e 94 34 01 	call	0x268	; 0x268 <DAC_init>
	tcc0_init();
 37c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <tcc0_init>
	DMA_init();
 380:	0e 94 c9 01 	call	0x392	; 0x392 <DMA_init>
	
	//Enabled interrupts
	PMIC_CTRL = PMIC_LOLVLEN_bm;	//Low level interrupts
 384:	82 ea       	ldi	r24, 0xA2	; 162
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	21 e0       	ldi	r18, 0x01	; 1
 38a:	fc 01       	movw	r30, r24
 38c:	20 83       	st	Z, r18
	sei();	//global interrupt
 38e:	78 94       	sei
	
	while (1) {}
 390:	ff cf       	rjmp	.-2      	; 0x390 <main+0x24>

00000392 <DMA_init>:
	return 0;
}

//Initialize DMA
void DMA_init(){
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
 39a:	2a 97       	sbiw	r28, 0x0a	; 10
 39c:	cd bf       	out	0x3d, r28	; 61
 39e:	de bf       	out	0x3e, r29	; 62
	uint32_t sine = (uint32_t)sin;
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	90 e2       	ldi	r25, 0x20	; 32
 3a4:	09 2e       	mov	r0, r25
 3a6:	00 0c       	add	r0, r0
 3a8:	aa 0b       	sbc	r26, r26
 3aa:	bb 0b       	sbc	r27, r27
 3ac:	89 83       	std	Y+1, r24	; 0x01
 3ae:	9a 83       	std	Y+2, r25	; 0x02
 3b0:	ab 83       	std	Y+3, r26	; 0x03
 3b2:	bc 83       	std	Y+4, r27	; 0x04
	
	//Reset DMA
	DMA.CTRL |= DMA_RESET_bm;
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	31 e0       	ldi	r19, 0x01	; 1
 3bc:	f9 01       	movw	r30, r18
 3be:	20 81       	ld	r18, Z
 3c0:	20 64       	ori	r18, 0x40	; 64
 3c2:	fc 01       	movw	r30, r24
 3c4:	20 83       	st	Z, r18
	
	//Increment the source after transfer
	//Increment the destination after received
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BLOCK_gc|DMA_CH_SRCDIR_INC_gc|DMA_CH_DESTRELOAD_BURST_gc|DMA_CH_DESTDIR_INC_gc;
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	29 e5       	ldi	r18, 0x59	; 89
 3cc:	fc 01       	movw	r30, r24
 3ce:	22 8b       	std	Z+18, r18	; 0x12
	//Transfer data when TCE0 overflows
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_TCC0_OVF_gc;
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	20 e4       	ldi	r18, 0x40	; 64
 3d6:	fc 01       	movw	r30, r24
 3d8:	23 8b       	std	Z+19, r18	; 0x13
	//Byte transfers in a block transfer
	DMA.CH0.TRFCNT =512; //512=256(8bit)*2(16bit)
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	20 e0       	ldi	r18, 0x00	; 0
 3e0:	32 e0       	ldi	r19, 0x02	; 2
 3e2:	fc 01       	movw	r30, r24
 3e4:	24 8b       	std	Z+20, r18	; 0x14
 3e6:	35 8b       	std	Z+21, r19	; 0x15
	//Unlimited repeats
	DMA.CH0.REPCNT = 0x00;
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	fc 01       	movw	r30, r24
 3ee:	16 8a       	std	Z+22, r1	; 0x16

	//Starting address of the source
	DMA.CH0.SRCADDR0 = (uint8_t)(sine>>0);
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	29 81       	ldd	r18, Y+1	; 0x01
 3f6:	fc 01       	movw	r30, r24
 3f8:	20 8f       	std	Z+24, r18	; 0x18
	DMA.CH0.SRCADDR1 = (uint8_t)(sine>>8);
 3fa:	20 e0       	ldi	r18, 0x00	; 0
 3fc:	31 e0       	ldi	r19, 0x01	; 1
 3fe:	89 81       	ldd	r24, Y+1	; 0x01
 400:	9a 81       	ldd	r25, Y+2	; 0x02
 402:	ab 81       	ldd	r26, Y+3	; 0x03
 404:	bc 81       	ldd	r27, Y+4	; 0x04
 406:	89 2f       	mov	r24, r25
 408:	9a 2f       	mov	r25, r26
 40a:	ab 2f       	mov	r26, r27
 40c:	bb 27       	eor	r27, r27
 40e:	f9 01       	movw	r30, r18
 410:	81 8f       	std	Z+25, r24	; 0x19
	DMA.CH0.SRCADDR2 = (uint8_t)(sine>>16);
 412:	20 e0       	ldi	r18, 0x00	; 0
 414:	31 e0       	ldi	r19, 0x01	; 1
 416:	89 81       	ldd	r24, Y+1	; 0x01
 418:	9a 81       	ldd	r25, Y+2	; 0x02
 41a:	ab 81       	ldd	r26, Y+3	; 0x03
 41c:	bc 81       	ldd	r27, Y+4	; 0x04
 41e:	cd 01       	movw	r24, r26
 420:	aa 27       	eor	r26, r26
 422:	bb 27       	eor	r27, r27
 424:	f9 01       	movw	r30, r18
 426:	82 8f       	std	Z+26, r24	; 0x1a
	
	uint8_t* dac_ptr = &DACA.CH1DATA;
 428:	8a e1       	ldi	r24, 0x1A	; 26
 42a:	93 e0       	ldi	r25, 0x03	; 3
 42c:	8d 83       	std	Y+5, r24	; 0x05
 42e:	9e 83       	std	Y+6, r25	; 0x06
	uint32_t dac_address = (uint32_t)dac_ptr;
 430:	8d 81       	ldd	r24, Y+5	; 0x05
 432:	9e 81       	ldd	r25, Y+6	; 0x06
 434:	09 2e       	mov	r0, r25
 436:	00 0c       	add	r0, r0
 438:	aa 0b       	sbc	r26, r26
 43a:	bb 0b       	sbc	r27, r27
 43c:	8f 83       	std	Y+7, r24	; 0x07
 43e:	98 87       	std	Y+8, r25	; 0x08
 440:	a9 87       	std	Y+9, r26	; 0x09
 442:	ba 87       	std	Y+10, r27	; 0x0a
	//Store data to the DAC
	DMA.CH0.DESTADDR0 = (uint8_t) (dac_address>>0);
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	2f 81       	ldd	r18, Y+7	; 0x07
 44a:	fc 01       	movw	r30, r24
 44c:	24 8f       	std	Z+28, r18	; 0x1c
	DMA.CH0.DESTADDR1 = (uint8_t) (dac_address>>8);
 44e:	20 e0       	ldi	r18, 0x00	; 0
 450:	31 e0       	ldi	r19, 0x01	; 1
 452:	8f 81       	ldd	r24, Y+7	; 0x07
 454:	98 85       	ldd	r25, Y+8	; 0x08
 456:	a9 85       	ldd	r26, Y+9	; 0x09
 458:	ba 85       	ldd	r27, Y+10	; 0x0a
 45a:	89 2f       	mov	r24, r25
 45c:	9a 2f       	mov	r25, r26
 45e:	ab 2f       	mov	r26, r27
 460:	bb 27       	eor	r27, r27
 462:	f9 01       	movw	r30, r18
 464:	85 8f       	std	Z+29, r24	; 0x1d
	DMA.CH0.DESTADDR2 = (uint8_t) (dac_address>>16);
 466:	20 e0       	ldi	r18, 0x00	; 0
 468:	31 e0       	ldi	r19, 0x01	; 1
 46a:	8f 81       	ldd	r24, Y+7	; 0x07
 46c:	98 85       	ldd	r25, Y+8	; 0x08
 46e:	a9 85       	ldd	r26, Y+9	; 0x09
 470:	ba 85       	ldd	r27, Y+10	; 0x0a
 472:	cd 01       	movw	r24, r26
 474:	aa 27       	eor	r26, r26
 476:	bb 27       	eor	r27, r27
 478:	f9 01       	movw	r30, r18
 47a:	86 8f       	std	Z+30, r24	; 0x1e
	
	//Enable CH0
	//Unlimited repeat, Data is sent in burst where each burst is 2 bytes long
	DMA.CH0.CTRLA = DMA_CH_REPEAT_bm|DMA_CH_SINGLE_bm|DMA_CH_BURSTLEN_2BYTE_gc;
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	91 e0       	ldi	r25, 0x01	; 1
 480:	25 e2       	ldi	r18, 0x25	; 37
 482:	fc 01       	movw	r30, r24
 484:	20 8b       	std	Z+16, r18	; 0x10
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	20 e0       	ldi	r18, 0x00	; 0
 48c:	31 e0       	ldi	r19, 0x01	; 1
 48e:	f9 01       	movw	r30, r18
 490:	20 89       	ldd	r18, Z+16	; 0x10
 492:	20 68       	ori	r18, 0x80	; 128
 494:	fc 01       	movw	r30, r24
 496:	20 8b       	std	Z+16, r18	; 0x10
	
	//Enable DMA
	DMA.CTRL |= DMA_ENABLE_bm;
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	20 e0       	ldi	r18, 0x00	; 0
 49e:	31 e0       	ldi	r19, 0x01	; 1
 4a0:	f9 01       	movw	r30, r18
 4a2:	20 81       	ld	r18, Z
 4a4:	20 68       	ori	r18, 0x80	; 128
 4a6:	fc 01       	movw	r30, r24
 4a8:	20 83       	st	Z, r18
}
 4aa:	00 00       	nop
 4ac:	2a 96       	adiw	r28, 0x0a	; 10
 4ae:	cd bf       	out	0x3d, r28	; 61
 4b0:	de bf       	out	0x3e, r29	; 62
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	08 95       	ret

000004b8 <_exit>:
 4b8:	f8 94       	cli

000004ba <__stop_program>:
 4ba:	ff cf       	rjmp	.-2      	; 0x4ba <__stop_program>
