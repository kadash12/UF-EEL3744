
Lab7_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b26  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000b9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00802000  00802000  00000b9a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000493f  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003d12  00000000  00000000  000055b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000948  00000000  00000000  000092c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00009c10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000040e8  00000000  00000000  00009d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022b  00000000  00000000  0000de20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000e04b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 3c 03 	jmp	0x678	; 0x678 <__vector_71>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a4 30       	cpi	r26, 0x04	; 4
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 7f 01 	call	0x2fe	; 0x2fe <main>
 228:	0c 94 91 05 	jmp	0xb22	; 0xb22 <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <tcc0_init>:
//Global Variables to store output
int16_t test = 0;	//Digit output
volatile int global_flag = 0;	//Global flag of interrupt

//Initialize TCC0 timer
void tcc0_init(void){
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	1f 92       	push	r1
 236:	1f 92       	push	r1
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
	//SCK = 2MHz, Prescaler = 1024, Time = 0.5sec
	int period = (2000000/(1024*2));	//2 Hz
 23c:	80 ed       	ldi	r24, 0xD0	; 208
 23e:	93 e0       	ldi	r25, 0x03	; 3
 240:	89 83       	std	Y+1, r24	; 0x01
 242:	9a 83       	std	Y+2, r25	; 0x02
	
	//Set period
	TCC0_PERL = (uint8_t) period;	//Low Period
 244:	86 e2       	ldi	r24, 0x26	; 38
 246:	98 e0       	ldi	r25, 0x08	; 8
 248:	29 81       	ldd	r18, Y+1	; 0x01
 24a:	fc 01       	movw	r30, r24
 24c:	20 83       	st	Z, r18
	TCC0_PERH = (uint8_t) (period>>8);	//High Period
 24e:	87 e2       	ldi	r24, 0x27	; 39
 250:	98 e0       	ldi	r25, 0x08	; 8
 252:	29 81       	ldd	r18, Y+1	; 0x01
 254:	3a 81       	ldd	r19, Y+2	; 0x02
 256:	23 2f       	mov	r18, r19
 258:	33 0f       	add	r19, r19
 25a:	33 0b       	sbc	r19, r19
 25c:	fc 01       	movw	r30, r24
 25e:	20 83       	st	Z, r18

	//Normal mode timer
	TCC0_CTRLB = 0x00;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	98 e0       	ldi	r25, 0x08	; 8
 264:	fc 01       	movw	r30, r24
 266:	10 82       	st	Z, r1
	
	//Trigger an event on Event Channel 0
	EVSYS_CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
 268:	80 e8       	ldi	r24, 0x80	; 128
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	20 ec       	ldi	r18, 0xC0	; 192
 26e:	fc 01       	movw	r30, r24
 270:	20 83       	st	Z, r18

	//Set perscaler = 1024
	TCC0_CTRLA = 0x07;
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	98 e0       	ldi	r25, 0x08	; 8
 276:	27 e0       	ldi	r18, 0x07	; 7
 278:	fc 01       	movw	r30, r24
 27a:	20 83       	st	Z, r18
}
 27c:	00 00       	nop
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <adc_init>:

//Initialize ADC
void adc_init(void){
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	cd b7       	in	r28, 0x3d	; 61
 28e:	de b7       	in	r29, 0x3e	; 62
	//12-bit signed, right-adjusted, Normal, 2.5Vref
	ADCA_CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	92 e0       	ldi	r25, 0x02	; 2
 294:	20 e1       	ldi	r18, 0x10	; 16
 296:	fc 01       	movw	r30, r24
 298:	20 83       	st	Z, r18
	ADCA_REFCTRL = ADC_REFSEL_AREFB_gc;		//2.5Vref
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	92 e0       	ldi	r25, 0x02	; 2
 29e:	20 e3       	ldi	r18, 0x30	; 48
 2a0:	fc 01       	movw	r30, r24
 2a2:	20 83       	st	Z, r18
	
	//ADC Clock prescaler=512
	ADCA_PRESCALER = ADC_PRESCALER_DIV512_gc;
 2a4:	84 e0       	ldi	r24, 0x04	; 4
 2a6:	92 e0       	ldi	r25, 0x02	; 2
 2a8:	27 e0       	ldi	r18, 0x07	; 7
 2aa:	fc 01       	movw	r30, r24
 2ac:	20 83       	st	Z, r18

	//Enable Port A
	PORTA_DIRCLR = PIN1_bm | PIN6_bm;	//PortA input pins
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	96 e0       	ldi	r25, 0x06	; 6
 2b2:	22 e4       	ldi	r18, 0x42	; 66
 2b4:	fc 01       	movw	r30, r24
 2b6:	20 83       	st	Z, r18

	//Differential input signal with gain
	ADCA_CH0_CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc;
 2b8:	80 e2       	ldi	r24, 0x20	; 32
 2ba:	92 e0       	ldi	r25, 0x02	; 2
 2bc:	23 e0       	ldi	r18, 0x03	; 3
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
	
	//MUXCTRL pin1 + and pin6 -
	ADCA_CH0_MUXCTRL = ADC_CH_MUXPOS_PIN1_gc | ADC_CH_MUXNEG_PIN6_gc;
 2c2:	81 e2       	ldi	r24, 0x21	; 33
 2c4:	92 e0       	ldi	r25, 0x02	; 2
 2c6:	2a e0       	ldi	r18, 0x0A	; 10
 2c8:	fc 01       	movw	r30, r24
 2ca:	20 83       	st	Z, r18
	
	//Setup ADC Low Level interrupt
	ADCA_CH0_INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;	//Triggered on flag- when a conversion is complete
 2cc:	82 e2       	ldi	r24, 0x22	; 34
 2ce:	92 e0       	ldi	r25, 0x02	; 2
 2d0:	21 e0       	ldi	r18, 0x01	; 1
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18

	//Enable Low Level interrupts
	PMIC_CTRL = PMIC_LOLVLEN_bm;
 2d6:	82 ea       	ldi	r24, 0xA2	; 162
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	21 e0       	ldi	r18, 0x01	; 1
 2dc:	fc 01       	movw	r30, r24
 2de:	20 83       	st	Z, r18
	//Enable global enable interrupts
	sei();
 2e0:	78 94       	sei

	//ADC conversion start when Event Channel 0 is triggered
	ADCA_EVCTRL = ADC_SWEEP_0_gc | ADC_EVSEL_0123_gc | ADC_EVACT_CH0_gc;
 2e2:	83 e0       	ldi	r24, 0x03	; 3
 2e4:	92 e0       	ldi	r25, 0x02	; 2
 2e6:	21 e0       	ldi	r18, 0x01	; 1
 2e8:	fc 01       	movw	r30, r24
 2ea:	20 83       	st	Z, r18
	
	//Enable ADC
	ADCA_CTRLA = ADC_ENABLE_bm;
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	92 e0       	ldi	r25, 0x02	; 2
 2f0:	21 e0       	ldi	r18, 0x01	; 1
 2f2:	fc 01       	movw	r30, r24
 2f4:	20 83       	st	Z, r18
}
 2f6:	00 00       	nop
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <main>:

int main(void){
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	a4 97       	sbiw	r28, 0x24	; 36
 308:	cd bf       	out	0x3d, r28	; 61
 30a:	de bf       	out	0x3e, r29	; 62
	//Initialize
	PORTD_OUTSET = BLUE_PWM_LED;	//LED initially off
 30c:	85 e6       	ldi	r24, 0x65	; 101
 30e:	96 e0       	ldi	r25, 0x06	; 6
 310:	20 e4       	ldi	r18, 0x40	; 64
 312:	fc 01       	movw	r30, r24
 314:	20 83       	st	Z, r18
	PORTD_DIRSET = BLUE_PWM_LED;	//Set output
 316:	81 e6       	ldi	r24, 0x61	; 97
 318:	96 e0       	ldi	r25, 0x06	; 6
 31a:	20 e4       	ldi	r18, 0x40	; 64
 31c:	fc 01       	movw	r30, r24
 31e:	20 83       	st	Z, r18
	
	adc_init();
 320:	0e 94 44 01 	call	0x288	; 0x288 <adc_init>
	tcc0_init();
 324:	0e 94 18 01 	call	0x230	; 0x230 <tcc0_init>
	usartd0_init();
 328:	0e 94 85 03 	call	0x70a	; 0x70a <usartd0_init>
	char out[18];
	
	//Loop conversion
	while (1){
			//Output voltage when global flag gets set
			while (global_flag){
 32c:	9d c1       	rjmp	.+826    	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
				//Reset
				global_flag = 0;
 32e:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <global_flag>
 332:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <global_flag+0x1>

				float volt = (float) ((m*test)+b);	//Decimal voltage value
 336:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 33a:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 33e:	09 2e       	mov	r0, r25
 340:	00 0c       	add	r0, r0
 342:	aa 0b       	sbc	r26, r26
 344:	bb 0b       	sbc	r27, r27
 346:	bc 01       	movw	r22, r24
 348:	cd 01       	movw	r24, r26
 34a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__floatsisf>
 34e:	dc 01       	movw	r26, r24
 350:	cb 01       	movw	r24, r22
 352:	21 e0       	ldi	r18, 0x01	; 1
 354:	3a e0       	ldi	r19, 0x0A	; 10
 356:	40 ea       	ldi	r20, 0xA0	; 160
 358:	5a e3       	ldi	r21, 0x3A	; 58
 35a:	bc 01       	movw	r22, r24
 35c:	cd 01       	movw	r24, r26
 35e:	0e 94 24 05 	call	0xa48	; 0xa48 <__mulsf3>
 362:	dc 01       	movw	r26, r24
 364:	cb 01       	movw	r24, r22
 366:	20 e0       	ldi	r18, 0x00	; 0
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	a9 01       	movw	r20, r18
 36c:	bc 01       	movw	r22, r24
 36e:	cd 01       	movw	r24, r26
 370:	0e 94 cb 03 	call	0x796	; 0x796 <__addsf3>
 374:	dc 01       	movw	r26, r24
 376:	cb 01       	movw	r24, r22
 378:	89 83       	std	Y+1, r24	; 0x01
 37a:	9a 83       	std	Y+2, r25	; 0x02
 37c:	ab 83       	std	Y+3, r26	; 0x03
 37e:	bc 83       	std	Y+4, r27	; 0x04

				//Check for +/-
				if (test<0) {	//Negative
 380:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 384:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 388:	99 23       	and	r25, r25
 38a:	1c f4       	brge	.+6      	; 0x392 <main+0x94>
					 out[0] = '-';
 38c:	8d e2       	ldi	r24, 0x2D	; 45
 38e:	8b 8b       	std	Y+19, r24	; 0x13
 390:	02 c0       	rjmp	.+4      	; 0x396 <main+0x98>
				}
				else {	//Positive
					out[0] = '+';
 392:	8b e2       	ldi	r24, 0x2B	; 43
 394:	8b 8b       	std	Y+19, r24	; 0x13
				}

				out[1] = ' ';	//Space		
 396:	80 e2       	ldi	r24, 0x20	; 32
 398:	8c 8b       	std	Y+20, r24	; 0x14
				int index = 0;	//Indexing variable
 39a:	1d 82       	std	Y+5, r1	; 0x05
 39c:	1e 82       	std	Y+6, r1	; 0x06
				
				//Output decimal value
				for (int i = 0; i < 3; i++){	//3 digit
 39e:	1f 82       	std	Y+7, r1	; 0x07
 3a0:	18 86       	std	Y+8, r1	; 0x08
 3a2:	64 c0       	rjmp	.+200    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
					if(volt<0){	//Convert negative to positive
 3a4:	20 e0       	ldi	r18, 0x00	; 0
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	a9 01       	movw	r20, r18
 3aa:	69 81       	ldd	r22, Y+1	; 0x01
 3ac:	7a 81       	ldd	r23, Y+2	; 0x02
 3ae:	8b 81       	ldd	r24, Y+3	; 0x03
 3b0:	9c 81       	ldd	r25, Y+4	; 0x04
 3b2:	0e 94 37 04 	call	0x86e	; 0x86e <__cmpsf2>
 3b6:	88 23       	and	r24, r24
 3b8:	4c f4       	brge	.+18     	; 0x3cc <main+0xce>
						volt=volt*-1;
 3ba:	89 81       	ldd	r24, Y+1	; 0x01
 3bc:	9a 81       	ldd	r25, Y+2	; 0x02
 3be:	ab 81       	ldd	r26, Y+3	; 0x03
 3c0:	bc 81       	ldd	r27, Y+4	; 0x04
 3c2:	b0 58       	subi	r27, 0x80	; 128
 3c4:	89 83       	std	Y+1, r24	; 0x01
 3c6:	9a 83       	std	Y+2, r25	; 0x02
 3c8:	ab 83       	std	Y+3, r26	; 0x03
 3ca:	bc 83       	std	Y+4, r27	; 0x04
					}
					int temp = (int) volt;	//Int1 = (int) Pi = 3 
 3cc:	69 81       	ldd	r22, Y+1	; 0x01
 3ce:	7a 81       	ldd	r23, Y+2	; 0x02
 3d0:	8b 81       	ldd	r24, Y+3	; 0x03
 3d2:	9c 81       	ldd	r25, Y+4	; 0x04
 3d4:	0e 94 3c 04 	call	0x878	; 0x878 <__fixsfsi>
 3d8:	dc 01       	movw	r26, r24
 3da:	cb 01       	movw	r24, r22
 3dc:	89 8b       	std	Y+17, r24	; 0x11
 3de:	9a 8b       	std	Y+18, r25	; 0x12
					out[2+index] = temp+'0';	//1 digit
 3e0:	8d 81       	ldd	r24, Y+5	; 0x05
 3e2:	9e 81       	ldd	r25, Y+6	; 0x06
 3e4:	02 96       	adiw	r24, 0x02	; 2
 3e6:	29 89       	ldd	r18, Y+17	; 0x11
 3e8:	40 e3       	ldi	r20, 0x30	; 48
 3ea:	42 0f       	add	r20, r18
 3ec:	9e 01       	movw	r18, r28
 3ee:	2d 5e       	subi	r18, 0xED	; 237
 3f0:	3f 4f       	sbci	r19, 0xFF	; 255
 3f2:	82 0f       	add	r24, r18
 3f4:	93 1f       	adc	r25, r19
 3f6:	fc 01       	movw	r30, r24
 3f8:	40 83       	st	Z, r20

					volt = 10*(volt-temp);	//Pi2 = 10*(Pi - Int1) = 1.4159
 3fa:	89 89       	ldd	r24, Y+17	; 0x11
 3fc:	9a 89       	ldd	r25, Y+18	; 0x12
 3fe:	09 2e       	mov	r0, r25
 400:	00 0c       	add	r0, r0
 402:	aa 0b       	sbc	r26, r26
 404:	bb 0b       	sbc	r27, r27
 406:	bc 01       	movw	r22, r24
 408:	cd 01       	movw	r24, r26
 40a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__floatsisf>
 40e:	dc 01       	movw	r26, r24
 410:	cb 01       	movw	r24, r22
 412:	9c 01       	movw	r18, r24
 414:	ad 01       	movw	r20, r26
 416:	69 81       	ldd	r22, Y+1	; 0x01
 418:	7a 81       	ldd	r23, Y+2	; 0x02
 41a:	8b 81       	ldd	r24, Y+3	; 0x03
 41c:	9c 81       	ldd	r25, Y+4	; 0x04
 41e:	0e 94 ca 03 	call	0x794	; 0x794 <__subsf3>
 422:	dc 01       	movw	r26, r24
 424:	cb 01       	movw	r24, r22
 426:	20 e0       	ldi	r18, 0x00	; 0
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	40 e2       	ldi	r20, 0x20	; 32
 42c:	51 e4       	ldi	r21, 0x41	; 65
 42e:	bc 01       	movw	r22, r24
 430:	cd 01       	movw	r24, r26
 432:	0e 94 24 05 	call	0xa48	; 0xa48 <__mulsf3>
 436:	dc 01       	movw	r26, r24
 438:	cb 01       	movw	r24, r22
 43a:	89 83       	std	Y+1, r24	; 0x01
 43c:	9a 83       	std	Y+2, r25	; 0x02
 43e:	ab 83       	std	Y+3, r26	; 0x03
 440:	bc 83       	std	Y+4, r27	; 0x04
					
					if (i==0){
 442:	8f 81       	ldd	r24, Y+7	; 0x07
 444:	98 85       	ldd	r25, Y+8	; 0x08
 446:	89 2b       	or	r24, r25
 448:	39 f4       	brne	.+14     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
						out[3] = '.';	//Decimal point
 44a:	8e e2       	ldi	r24, 0x2E	; 46
 44c:	8e 8b       	std	Y+22, r24	; 0x16
						index++;	//Skip index 3
 44e:	8d 81       	ldd	r24, Y+5	; 0x05
 450:	9e 81       	ldd	r25, Y+6	; 0x06
 452:	01 96       	adiw	r24, 0x01	; 1
 454:	8d 83       	std	Y+5, r24	; 0x05
 456:	9e 83       	std	Y+6, r25	; 0x06
					}
					
					index++;	//increment
 458:	8d 81       	ldd	r24, Y+5	; 0x05
 45a:	9e 81       	ldd	r25, Y+6	; 0x06
 45c:	01 96       	adiw	r24, 0x01	; 1
 45e:	8d 83       	std	Y+5, r24	; 0x05
 460:	9e 83       	std	Y+6, r25	; 0x06

				out[1] = ' ';	//Space		
				int index = 0;	//Indexing variable
				
				//Output decimal value
				for (int i = 0; i < 3; i++){	//3 digit
 462:	8f 81       	ldd	r24, Y+7	; 0x07
 464:	98 85       	ldd	r25, Y+8	; 0x08
 466:	01 96       	adiw	r24, 0x01	; 1
 468:	8f 83       	std	Y+7, r24	; 0x07
 46a:	98 87       	std	Y+8, r25	; 0x08
 46c:	8f 81       	ldd	r24, Y+7	; 0x07
 46e:	98 85       	ldd	r25, Y+8	; 0x08
 470:	03 97       	sbiw	r24, 0x03	; 3
 472:	0c f4       	brge	.+2      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 474:	97 cf       	rjmp	.-210    	; 0x3a4 <main+0xa6>
					
					index++;	//increment
				}
	
				//Syntax
				out[6] = ' ';	
 476:	80 e2       	ldi	r24, 0x20	; 32
 478:	89 8f       	std	Y+25, r24	; 0x19
				out[7] = 'V';		
 47a:	86 e5       	ldi	r24, 0x56	; 86
 47c:	8a 8f       	std	Y+26, r24	; 0x1a
				out[8] = ' ';		
 47e:	80 e2       	ldi	r24, 0x20	; 32
 480:	8b 8f       	std	Y+27, r24	; 0x1b
				out[9] = '(';	
 482:	88 e2       	ldi	r24, 0x28	; 40
 484:	8c 8f       	std	Y+28, r24	; 0x1c
				out[10] = '0';	
 486:	80 e3       	ldi	r24, 0x30	; 48
 488:	8d 8f       	std	Y+29, r24	; 0x1d
				out[11] = 'x';
 48a:	88 e7       	ldi	r24, 0x78	; 120
 48c:	8e 8f       	std	Y+30, r24	; 0x1e
				
				
					// Output the ADC to the serial terminal
				int hex3 = (uint8_t)(test>>8)%16;
 48e:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 492:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 496:	89 2f       	mov	r24, r25
 498:	99 27       	eor	r25, r25
 49a:	8f 70       	andi	r24, 0x0F	; 15
 49c:	90 78       	andi	r25, 0x80	; 128
 49e:	99 23       	and	r25, r25
 4a0:	24 f4       	brge	.+8      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	80 6f       	ori	r24, 0xF0	; 240
 4a6:	9f 6f       	ori	r25, 0xFF	; 255
 4a8:	01 96       	adiw	r24, 0x01	; 1
 4aa:	8b 87       	std	Y+11, r24	; 0x0b
 4ac:	9c 87       	std	Y+12, r25	; 0x0c
				if(hex3 <= 9){
 4ae:	8b 85       	ldd	r24, Y+11	; 0x0b
 4b0:	9c 85       	ldd	r25, Y+12	; 0x0c
 4b2:	0a 97       	sbiw	r24, 0x0a	; 10
 4b4:	24 f4       	brge	.+8      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
					out[12] = ((uint8_t) hex3)+'0';	//First hex
 4b6:	8b 85       	ldd	r24, Y+11	; 0x0b
 4b8:	80 5d       	subi	r24, 0xD0	; 208
 4ba:	8f 8f       	std	Y+31, r24	; 0x1f
 4bc:	30 c0       	rjmp	.+96     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
				}
				else if(hex3 > 9){
 4be:	8b 85       	ldd	r24, Y+11	; 0x0b
 4c0:	9c 85       	ldd	r25, Y+12	; 0x0c
 4c2:	0a 97       	sbiw	r24, 0x0a	; 10
 4c4:	54 f1       	brlt	.+84     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
					switch(hex3){
 4c6:	8b 85       	ldd	r24, Y+11	; 0x0b
 4c8:	9c 85       	ldd	r25, Y+12	; 0x0c
 4ca:	8c 30       	cpi	r24, 0x0C	; 12
 4cc:	91 05       	cpc	r25, r1
 4ce:	c1 f0       	breq	.+48     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 4d0:	8d 30       	cpi	r24, 0x0D	; 13
 4d2:	91 05       	cpc	r25, r1
 4d4:	34 f4       	brge	.+12     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4d6:	8a 30       	cpi	r24, 0x0A	; 10
 4d8:	91 05       	cpc	r25, r1
 4da:	61 f0       	breq	.+24     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4dc:	0b 97       	sbiw	r24, 0x0b	; 11
 4de:	69 f0       	breq	.+26     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4e0:	1e c0       	rjmp	.+60     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 4e2:	8e 30       	cpi	r24, 0x0E	; 14
 4e4:	91 05       	cpc	r25, r1
 4e6:	91 f0       	breq	.+36     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 4e8:	8e 30       	cpi	r24, 0x0E	; 14
 4ea:	91 05       	cpc	r25, r1
 4ec:	64 f0       	brlt	.+24     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 4ee:	0f 97       	sbiw	r24, 0x0f	; 15
 4f0:	81 f0       	breq	.+32     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 4f2:	15 c0       	rjmp	.+42     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
						case 10: out[12] = 'A';	//First hex
 4f4:	81 e4       	ldi	r24, 0x41	; 65
 4f6:	8f 8f       	std	Y+31, r24	; 0x1f
						break;
 4f8:	12 c0       	rjmp	.+36     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
						case 11: out[12] = 'B';	//First hex
 4fa:	82 e4       	ldi	r24, 0x42	; 66
 4fc:	8f 8f       	std	Y+31, r24	; 0x1f
						break;
 4fe:	0f c0       	rjmp	.+30     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
						case 12: out[12] = 'C';	//First hex
 500:	83 e4       	ldi	r24, 0x43	; 67
 502:	8f 8f       	std	Y+31, r24	; 0x1f
						break;
 504:	0c c0       	rjmp	.+24     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
						case 13: out[12] = 'D';	//First hex
 506:	84 e4       	ldi	r24, 0x44	; 68
 508:	8f 8f       	std	Y+31, r24	; 0x1f
						break;
 50a:	09 c0       	rjmp	.+18     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
						case 14: out[12] = 'E';	//First hex
 50c:	85 e4       	ldi	r24, 0x45	; 69
 50e:	8f 8f       	std	Y+31, r24	; 0x1f
						break;
 510:	06 c0       	rjmp	.+12     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
						case 15: out[12] = 'F';	//First hex
 512:	86 e4       	ldi	r24, 0x46	; 70
 514:	8f 8f       	std	Y+31, r24	; 0x1f
						break;
 516:	00 00       	nop
 518:	02 c0       	rjmp	.+4      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
					}
				}
				else{
					out[12] = '0';
 51a:	80 e3       	ldi	r24, 0x30	; 48
 51c:	8f 8f       	std	Y+31, r24	; 0x1f
				}

				// Output the ADC to the serial terminal
				int hex2 = (uint8_t)(test>>4)%16;
 51e:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 522:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 526:	95 95       	asr	r25
 528:	87 95       	ror	r24
 52a:	95 95       	asr	r25
 52c:	87 95       	ror	r24
 52e:	95 95       	asr	r25
 530:	87 95       	ror	r24
 532:	95 95       	asr	r25
 534:	87 95       	ror	r24
 536:	8f 70       	andi	r24, 0x0F	; 15
 538:	99 27       	eor	r25, r25
 53a:	8d 87       	std	Y+13, r24	; 0x0d
 53c:	9e 87       	std	Y+14, r25	; 0x0e
				if(hex2 <= 9){
 53e:	8d 85       	ldd	r24, Y+13	; 0x0d
 540:	9e 85       	ldd	r25, Y+14	; 0x0e
 542:	0a 97       	sbiw	r24, 0x0a	; 10
 544:	24 f4       	brge	.+8      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
					out[13] = ((uint8_t) hex2)+'0';	//First hex
 546:	8d 85       	ldd	r24, Y+13	; 0x0d
 548:	80 5d       	subi	r24, 0xD0	; 208
 54a:	88 a3       	std	Y+32, r24	; 0x20
 54c:	30 c0       	rjmp	.+96     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
				}
				else if(hex2 > 9){
 54e:	8d 85       	ldd	r24, Y+13	; 0x0d
 550:	9e 85       	ldd	r25, Y+14	; 0x0e
 552:	0a 97       	sbiw	r24, 0x0a	; 10
 554:	54 f1       	brlt	.+84     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
					switch(hex2){
 556:	8d 85       	ldd	r24, Y+13	; 0x0d
 558:	9e 85       	ldd	r25, Y+14	; 0x0e
 55a:	8c 30       	cpi	r24, 0x0C	; 12
 55c:	91 05       	cpc	r25, r1
 55e:	c1 f0       	breq	.+48     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
 560:	8d 30       	cpi	r24, 0x0D	; 13
 562:	91 05       	cpc	r25, r1
 564:	34 f4       	brge	.+12     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 566:	8a 30       	cpi	r24, 0x0A	; 10
 568:	91 05       	cpc	r25, r1
 56a:	61 f0       	breq	.+24     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 56c:	0b 97       	sbiw	r24, 0x0b	; 11
 56e:	69 f0       	breq	.+26     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 570:	1e c0       	rjmp	.+60     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
 572:	8e 30       	cpi	r24, 0x0E	; 14
 574:	91 05       	cpc	r25, r1
 576:	91 f0       	breq	.+36     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 578:	8e 30       	cpi	r24, 0x0E	; 14
 57a:	91 05       	cpc	r25, r1
 57c:	64 f0       	brlt	.+24     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 57e:	0f 97       	sbiw	r24, 0x0f	; 15
 580:	81 f0       	breq	.+32     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 582:	15 c0       	rjmp	.+42     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
						case 10: out[13] = 'A';	//First hex
 584:	81 e4       	ldi	r24, 0x41	; 65
 586:	88 a3       	std	Y+32, r24	; 0x20
						break;
 588:	12 c0       	rjmp	.+36     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
						case 11: out[13] = 'B';	//First hex
 58a:	82 e4       	ldi	r24, 0x42	; 66
 58c:	88 a3       	std	Y+32, r24	; 0x20
						break;
 58e:	0f c0       	rjmp	.+30     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
						case 12: out[13] = 'C';	//First hex
 590:	83 e4       	ldi	r24, 0x43	; 67
 592:	88 a3       	std	Y+32, r24	; 0x20
						break;
 594:	0c c0       	rjmp	.+24     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
						case 13: out[13] = 'D';	//First hex
 596:	84 e4       	ldi	r24, 0x44	; 68
 598:	88 a3       	std	Y+32, r24	; 0x20
						break;
 59a:	09 c0       	rjmp	.+18     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
						case 14: out[13] = 'E';	//First hex
 59c:	85 e4       	ldi	r24, 0x45	; 69
 59e:	88 a3       	std	Y+32, r24	; 0x20
						break;
 5a0:	06 c0       	rjmp	.+12     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
						case 15: out[13] = 'F';	//First hex
 5a2:	86 e4       	ldi	r24, 0x46	; 70
 5a4:	88 a3       	std	Y+32, r24	; 0x20
						break;
 5a6:	00 00       	nop
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
					}
				}
				else{
					out[13] = '0';
 5aa:	80 e3       	ldi	r24, 0x30	; 48
 5ac:	88 a3       	std	Y+32, r24	; 0x20
				}
				
				// Output the ADC to the serial terminal
				int hex = (uint8_t)(test)%16;
 5ae:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 5b2:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 5b6:	8f 70       	andi	r24, 0x0F	; 15
 5b8:	99 27       	eor	r25, r25
 5ba:	8f 87       	std	Y+15, r24	; 0x0f
 5bc:	98 8b       	std	Y+16, r25	; 0x10
				if(hex <= 9){
 5be:	8f 85       	ldd	r24, Y+15	; 0x0f
 5c0:	98 89       	ldd	r25, Y+16	; 0x10
 5c2:	0a 97       	sbiw	r24, 0x0a	; 10
 5c4:	24 f4       	brge	.+8      	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
					out[14] = ((uint8_t) hex)+'0';	//First hex
 5c6:	8f 85       	ldd	r24, Y+15	; 0x0f
 5c8:	80 5d       	subi	r24, 0xD0	; 208
 5ca:	89 a3       	std	Y+33, r24	; 0x21
 5cc:	30 c0       	rjmp	.+96     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
				}
				else if(hex > 9 ){
 5ce:	8f 85       	ldd	r24, Y+15	; 0x0f
 5d0:	98 89       	ldd	r25, Y+16	; 0x10
 5d2:	0a 97       	sbiw	r24, 0x0a	; 10
 5d4:	54 f1       	brlt	.+84     	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
					switch(hex){
 5d6:	8f 85       	ldd	r24, Y+15	; 0x0f
 5d8:	98 89       	ldd	r25, Y+16	; 0x10
 5da:	8c 30       	cpi	r24, 0x0C	; 12
 5dc:	91 05       	cpc	r25, r1
 5de:	c1 f0       	breq	.+48     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 5e0:	8d 30       	cpi	r24, 0x0D	; 13
 5e2:	91 05       	cpc	r25, r1
 5e4:	34 f4       	brge	.+12     	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
 5e6:	8a 30       	cpi	r24, 0x0A	; 10
 5e8:	91 05       	cpc	r25, r1
 5ea:	61 f0       	breq	.+24     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 5ec:	0b 97       	sbiw	r24, 0x0b	; 11
 5ee:	69 f0       	breq	.+26     	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 5f0:	1e c0       	rjmp	.+60     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 5f2:	8e 30       	cpi	r24, 0x0E	; 14
 5f4:	91 05       	cpc	r25, r1
 5f6:	91 f0       	breq	.+36     	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 5f8:	8e 30       	cpi	r24, 0x0E	; 14
 5fa:	91 05       	cpc	r25, r1
 5fc:	64 f0       	brlt	.+24     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 5fe:	0f 97       	sbiw	r24, 0x0f	; 15
 600:	81 f0       	breq	.+32     	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 602:	15 c0       	rjmp	.+42     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
						case 10: out[14] = 'A';	//First hex
 604:	81 e4       	ldi	r24, 0x41	; 65
 606:	89 a3       	std	Y+33, r24	; 0x21
						break;
 608:	12 c0       	rjmp	.+36     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
						case 11: out[14] = 'B';	//First hex
 60a:	82 e4       	ldi	r24, 0x42	; 66
 60c:	89 a3       	std	Y+33, r24	; 0x21
						break;
 60e:	0f c0       	rjmp	.+30     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
						case 12: out[14] = 'C';	//First hex
 610:	83 e4       	ldi	r24, 0x43	; 67
 612:	89 a3       	std	Y+33, r24	; 0x21
						break;
 614:	0c c0       	rjmp	.+24     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
						case 13: out[14] = 'D';	//First hex
 616:	84 e4       	ldi	r24, 0x44	; 68
 618:	89 a3       	std	Y+33, r24	; 0x21
						break;
 61a:	09 c0       	rjmp	.+18     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
						case 14: out[14] = 'E';	//First hex
 61c:	85 e4       	ldi	r24, 0x45	; 69
 61e:	89 a3       	std	Y+33, r24	; 0x21
						break;
 620:	06 c0       	rjmp	.+12     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
						case 15: out[14] = 'F';	//First hex
 622:	86 e4       	ldi	r24, 0x46	; 70
 624:	89 a3       	std	Y+33, r24	; 0x21
						break;
 626:	00 00       	nop
 628:	02 c0       	rjmp	.+4      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
					}
				}
				else{
					out[14] = '0';
 62a:	80 e3       	ldi	r24, 0x30	; 48
 62c:	89 a3       	std	Y+33, r24	; 0x21
				}

				out[15] = ')';	
 62e:	89 e2       	ldi	r24, 0x29	; 41
 630:	8a a3       	std	Y+34, r24	; 0x22
				out[16] = 13;	//Return
 632:	8d e0       	ldi	r24, 0x0D	; 13
 634:	8b a3       	std	Y+35, r24	; 0x23
				out[17] = 10;	//New line
 636:	8a e0       	ldi	r24, 0x0A	; 10
 638:	8c a3       	std	Y+36, r24	; 0x24
				
				//Output everything
				for (int j=0; j<18; j++){				
 63a:	19 86       	std	Y+9, r1	; 0x09
 63c:	1a 86       	std	Y+10, r1	; 0x0a
 63e:	10 c0       	rjmp	.+32     	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
					usartd0_out_char(out[j]);
 640:	9e 01       	movw	r18, r28
 642:	2d 5e       	subi	r18, 0xED	; 237
 644:	3f 4f       	sbci	r19, 0xFF	; 255
 646:	89 85       	ldd	r24, Y+9	; 0x09
 648:	9a 85       	ldd	r25, Y+10	; 0x0a
 64a:	82 0f       	add	r24, r18
 64c:	93 1f       	adc	r25, r19
 64e:	fc 01       	movw	r30, r24
 650:	80 81       	ld	r24, Z
 652:	0e 94 af 03 	call	0x75e	; 0x75e <usartd0_out_char>
				out[15] = ')';	
				out[16] = 13;	//Return
				out[17] = 10;	//New line
				
				//Output everything
				for (int j=0; j<18; j++){				
 656:	89 85       	ldd	r24, Y+9	; 0x09
 658:	9a 85       	ldd	r25, Y+10	; 0x0a
 65a:	01 96       	adiw	r24, 0x01	; 1
 65c:	89 87       	std	Y+9, r24	; 0x09
 65e:	9a 87       	std	Y+10, r25	; 0x0a
 660:	89 85       	ldd	r24, Y+9	; 0x09
 662:	9a 85       	ldd	r25, Y+10	; 0x0a
 664:	42 97       	sbiw	r24, 0x12	; 18
 666:	64 f3       	brlt	.-40     	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
	char out[18];
	
	//Loop conversion
	while (1){
			//Output voltage when global flag gets set
			while (global_flag){
 668:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <global_flag>
 66c:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <global_flag+0x1>
 670:	89 2b       	or	r24, r25
 672:	09 f0       	breq	.+2      	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
 674:	5c ce       	rjmp	.-840    	; 0x32e <main+0x30>
				//Output everything
				for (int j=0; j<18; j++){				
					usartd0_out_char(out[j]);
				}
			}
	}
 676:	5a ce       	rjmp	.-844    	; 0x32c <main+0x2e>

00000678 <__vector_71>:
	return 0;
}

//Interrupt Handler
ISR(ADCA_CH0_vect){
 678:	1f 92       	push	r1
 67a:	0f 92       	push	r0
 67c:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 680:	0f 92       	push	r0
 682:	11 24       	eor	r1, r1
 684:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 688:	0f 92       	push	r0
 68a:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 68e:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 692:	0f 92       	push	r0
 694:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 698:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 69c:	0f 92       	push	r0
 69e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 6a2:	2f 93       	push	r18
 6a4:	8f 93       	push	r24
 6a6:	9f 93       	push	r25
 6a8:	ef 93       	push	r30
 6aa:	ff 93       	push	r31
 6ac:	cf 93       	push	r28
 6ae:	df 93       	push	r29
 6b0:	cd b7       	in	r28, 0x3d	; 61
 6b2:	de b7       	in	r29, 0x3e	; 62
	//Test ADC value
	test = ADCA_CH0_RES;
 6b4:	84 e2       	ldi	r24, 0x24	; 36
 6b6:	92 e0       	ldi	r25, 0x02	; 2
 6b8:	fc 01       	movw	r30, r24
 6ba:	80 81       	ld	r24, Z
 6bc:	91 81       	ldd	r25, Z+1	; 0x01
 6be:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
 6c2:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <_edata+0x1>

	//Set global flag
	global_flag = 1;
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <global_flag>
 6ce:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <global_flag+0x1>
	
	//Turn off the BLUE_PWM LED
	PORTD_OUTTGL = BLUE_PWM_LED;
 6d2:	87 e6       	ldi	r24, 0x67	; 103
 6d4:	96 e0       	ldi	r25, 0x06	; 6
 6d6:	20 e4       	ldi	r18, 0x40	; 64
 6d8:	fc 01       	movw	r30, r24
 6da:	20 83       	st	Z, r18
}
 6dc:	00 00       	nop
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	ff 91       	pop	r31
 6e4:	ef 91       	pop	r30
 6e6:	9f 91       	pop	r25
 6e8:	8f 91       	pop	r24
 6ea:	2f 91       	pop	r18
 6ec:	0f 90       	pop	r0
 6ee:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 6f2:	0f 90       	pop	r0
 6f4:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 6f8:	0f 90       	pop	r0
 6fa:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 6fe:	0f 90       	pop	r0
 700:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 704:	0f 90       	pop	r0
 706:	1f 90       	pop	r1
 708:	18 95       	reti

0000070a <usartd0_init>:
*/

#include <avr/io.h>

//USART Initialization
void usartd0_init(void){
 70a:	cf 93       	push	r28
 70c:	df 93       	push	r29
 70e:	cd b7       	in	r28, 0x3d	; 61
 710:	de b7       	in	r29, 0x3e	; 62
	//Configure TxD and RxD pins
	PORTD.OUTSET = PIN3_bm;
 712:	80 e6       	ldi	r24, 0x60	; 96
 714:	96 e0       	ldi	r25, 0x06	; 6
 716:	28 e0       	ldi	r18, 0x08	; 8
 718:	fc 01       	movw	r30, r24
 71a:	25 83       	std	Z+5, r18	; 0x05
	PORTD.DIRSET = PIN3_bm;
 71c:	80 e6       	ldi	r24, 0x60	; 96
 71e:	96 e0       	ldi	r25, 0x06	; 6
 720:	28 e0       	ldi	r18, 0x08	; 8
 722:	fc 01       	movw	r30, r24
 724:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 726:	80 e6       	ldi	r24, 0x60	; 96
 728:	96 e0       	ldi	r25, 0x06	; 6
 72a:	24 e0       	ldi	r18, 0x04	; 4
 72c:	fc 01       	movw	r30, r24
 72e:	22 83       	std	Z+2, r18	; 0x02
	
	//Baud rate: At 2 MHz, 0 BSEL, -3 BSCALE corresponds to 128000 bps */
	USARTD0.BAUDCTRLA = (uint8_t)0;
 730:	80 ea       	ldi	r24, 0xA0	; 160
 732:	99 e0       	ldi	r25, 0x09	; 9
 734:	fc 01       	movw	r30, r24
 736:	16 82       	std	Z+6, r1	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)( (-3 << 4) | (0 >> 8));
 738:	80 ea       	ldi	r24, 0xA0	; 160
 73a:	99 e0       	ldi	r25, 0x09	; 9
 73c:	20 ed       	ldi	r18, 0xD0	; 208
 73e:	fc 01       	movw	r30, r24
 740:	27 83       	std	Z+7, r18	; 0x07

	//8 data bits, no parity, and one stop bit.
	USARTD0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc & ~USART_SBMODE_bm;
 742:	80 ea       	ldi	r24, 0xA0	; 160
 744:	99 e0       	ldi	r25, 0x09	; 9
 746:	23 e0       	ldi	r18, 0x03	; 3
 748:	fc 01       	movw	r30, r24
 74a:	25 83       	std	Z+5, r18	; 0x05

	//Enable Receiver and/or Transmitter
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 74c:	80 ea       	ldi	r24, 0xA0	; 160
 74e:	99 e0       	ldi	r25, 0x09	; 9
 750:	28 e1       	ldi	r18, 0x18	; 24
 752:	fc 01       	movw	r30, r24
 754:	24 83       	std	Z+4, r18	; 0x04
}
 756:	00 00       	nop
 758:	df 91       	pop	r29
 75a:	cf 91       	pop	r28
 75c:	08 95       	ret

0000075e <usartd0_out_char>:

//Output character
void usartd0_out_char(char output){
 75e:	cf 93       	push	r28
 760:	df 93       	push	r29
 762:	1f 92       	push	r1
 764:	cd b7       	in	r28, 0x3d	; 61
 766:	de b7       	in	r29, 0x3e	; 62
 768:	89 83       	std	Y+1, r24	; 0x01
	//Wait till transmission is done
	while(!(USARTD0.STATUS & USART_DREIF_bm));
 76a:	00 00       	nop
 76c:	80 ea       	ldi	r24, 0xA0	; 160
 76e:	99 e0       	ldi	r25, 0x09	; 9
 770:	fc 01       	movw	r30, r24
 772:	81 81       	ldd	r24, Z+1	; 0x01
 774:	88 2f       	mov	r24, r24
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	80 72       	andi	r24, 0x20	; 32
 77a:	99 27       	eor	r25, r25
 77c:	89 2b       	or	r24, r25
 77e:	b1 f3       	breq	.-20     	; 0x76c <usartd0_out_char+0xe>
	USARTD0.DATA = output;	//output c
 780:	80 ea       	ldi	r24, 0xA0	; 160
 782:	99 e0       	ldi	r25, 0x09	; 9
 784:	29 81       	ldd	r18, Y+1	; 0x01
 786:	fc 01       	movw	r30, r24
 788:	20 83       	st	Z, r18
}
 78a:	00 00       	nop
 78c:	0f 90       	pop	r0
 78e:	df 91       	pop	r29
 790:	cf 91       	pop	r28
 792:	08 95       	ret

00000794 <__subsf3>:
 794:	50 58       	subi	r21, 0x80	; 128

00000796 <__addsf3>:
 796:	bb 27       	eor	r27, r27
 798:	aa 27       	eor	r26, r26
 79a:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__addsf3x>
 79e:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__fp_round>
 7a2:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__fp_pscA>
 7a6:	38 f0       	brcs	.+14     	; 0x7b6 <__addsf3+0x20>
 7a8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fp_pscB>
 7ac:	20 f0       	brcs	.+8      	; 0x7b6 <__addsf3+0x20>
 7ae:	39 f4       	brne	.+14     	; 0x7be <__addsf3+0x28>
 7b0:	9f 3f       	cpi	r25, 0xFF	; 255
 7b2:	19 f4       	brne	.+6      	; 0x7ba <__addsf3+0x24>
 7b4:	26 f4       	brtc	.+8      	; 0x7be <__addsf3+0x28>
 7b6:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__fp_nan>
 7ba:	0e f4       	brtc	.+2      	; 0x7be <__addsf3+0x28>
 7bc:	e0 95       	com	r30
 7be:	e7 fb       	bst	r30, 7
 7c0:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_inf>

000007c4 <__addsf3x>:
 7c4:	e9 2f       	mov	r30, r25
 7c6:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__fp_split3>
 7ca:	58 f3       	brcs	.-42     	; 0x7a2 <__addsf3+0xc>
 7cc:	ba 17       	cp	r27, r26
 7ce:	62 07       	cpc	r22, r18
 7d0:	73 07       	cpc	r23, r19
 7d2:	84 07       	cpc	r24, r20
 7d4:	95 07       	cpc	r25, r21
 7d6:	20 f0       	brcs	.+8      	; 0x7e0 <__addsf3x+0x1c>
 7d8:	79 f4       	brne	.+30     	; 0x7f8 <__addsf3x+0x34>
 7da:	a6 f5       	brtc	.+104    	; 0x844 <__addsf3x+0x80>
 7dc:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__fp_zero>
 7e0:	0e f4       	brtc	.+2      	; 0x7e4 <__addsf3x+0x20>
 7e2:	e0 95       	com	r30
 7e4:	0b 2e       	mov	r0, r27
 7e6:	ba 2f       	mov	r27, r26
 7e8:	a0 2d       	mov	r26, r0
 7ea:	0b 01       	movw	r0, r22
 7ec:	b9 01       	movw	r22, r18
 7ee:	90 01       	movw	r18, r0
 7f0:	0c 01       	movw	r0, r24
 7f2:	ca 01       	movw	r24, r20
 7f4:	a0 01       	movw	r20, r0
 7f6:	11 24       	eor	r1, r1
 7f8:	ff 27       	eor	r31, r31
 7fa:	59 1b       	sub	r21, r25
 7fc:	99 f0       	breq	.+38     	; 0x824 <__addsf3x+0x60>
 7fe:	59 3f       	cpi	r21, 0xF9	; 249
 800:	50 f4       	brcc	.+20     	; 0x816 <__addsf3x+0x52>
 802:	50 3e       	cpi	r21, 0xE0	; 224
 804:	68 f1       	brcs	.+90     	; 0x860 <__addsf3x+0x9c>
 806:	1a 16       	cp	r1, r26
 808:	f0 40       	sbci	r31, 0x00	; 0
 80a:	a2 2f       	mov	r26, r18
 80c:	23 2f       	mov	r18, r19
 80e:	34 2f       	mov	r19, r20
 810:	44 27       	eor	r20, r20
 812:	58 5f       	subi	r21, 0xF8	; 248
 814:	f3 cf       	rjmp	.-26     	; 0x7fc <__addsf3x+0x38>
 816:	46 95       	lsr	r20
 818:	37 95       	ror	r19
 81a:	27 95       	ror	r18
 81c:	a7 95       	ror	r26
 81e:	f0 40       	sbci	r31, 0x00	; 0
 820:	53 95       	inc	r21
 822:	c9 f7       	brne	.-14     	; 0x816 <__addsf3x+0x52>
 824:	7e f4       	brtc	.+30     	; 0x844 <__addsf3x+0x80>
 826:	1f 16       	cp	r1, r31
 828:	ba 0b       	sbc	r27, r26
 82a:	62 0b       	sbc	r22, r18
 82c:	73 0b       	sbc	r23, r19
 82e:	84 0b       	sbc	r24, r20
 830:	ba f0       	brmi	.+46     	; 0x860 <__addsf3x+0x9c>
 832:	91 50       	subi	r25, 0x01	; 1
 834:	a1 f0       	breq	.+40     	; 0x85e <__addsf3x+0x9a>
 836:	ff 0f       	add	r31, r31
 838:	bb 1f       	adc	r27, r27
 83a:	66 1f       	adc	r22, r22
 83c:	77 1f       	adc	r23, r23
 83e:	88 1f       	adc	r24, r24
 840:	c2 f7       	brpl	.-16     	; 0x832 <__addsf3x+0x6e>
 842:	0e c0       	rjmp	.+28     	; 0x860 <__addsf3x+0x9c>
 844:	ba 0f       	add	r27, r26
 846:	62 1f       	adc	r22, r18
 848:	73 1f       	adc	r23, r19
 84a:	84 1f       	adc	r24, r20
 84c:	48 f4       	brcc	.+18     	; 0x860 <__addsf3x+0x9c>
 84e:	87 95       	ror	r24
 850:	77 95       	ror	r23
 852:	67 95       	ror	r22
 854:	b7 95       	ror	r27
 856:	f7 95       	ror	r31
 858:	9e 3f       	cpi	r25, 0xFE	; 254
 85a:	08 f0       	brcs	.+2      	; 0x85e <__addsf3x+0x9a>
 85c:	b0 cf       	rjmp	.-160    	; 0x7be <__addsf3+0x28>
 85e:	93 95       	inc	r25
 860:	88 0f       	add	r24, r24
 862:	08 f0       	brcs	.+2      	; 0x866 <__addsf3x+0xa2>
 864:	99 27       	eor	r25, r25
 866:	ee 0f       	add	r30, r30
 868:	97 95       	ror	r25
 86a:	87 95       	ror	r24
 86c:	08 95       	ret

0000086e <__cmpsf2>:
 86e:	0e 94 af 04 	call	0x95e	; 0x95e <__fp_cmp>
 872:	08 f4       	brcc	.+2      	; 0x876 <__cmpsf2+0x8>
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	08 95       	ret

00000878 <__fixsfsi>:
 878:	0e 94 43 04 	call	0x886	; 0x886 <__fixunssfsi>
 87c:	68 94       	set
 87e:	b1 11       	cpse	r27, r1
 880:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__fp_szero>
 884:	08 95       	ret

00000886 <__fixunssfsi>:
 886:	0e 94 03 05 	call	0xa06	; 0xa06 <__fp_splitA>
 88a:	88 f0       	brcs	.+34     	; 0x8ae <__fixunssfsi+0x28>
 88c:	9f 57       	subi	r25, 0x7F	; 127
 88e:	98 f0       	brcs	.+38     	; 0x8b6 <__fixunssfsi+0x30>
 890:	b9 2f       	mov	r27, r25
 892:	99 27       	eor	r25, r25
 894:	b7 51       	subi	r27, 0x17	; 23
 896:	b0 f0       	brcs	.+44     	; 0x8c4 <__fixunssfsi+0x3e>
 898:	e1 f0       	breq	.+56     	; 0x8d2 <__fixunssfsi+0x4c>
 89a:	66 0f       	add	r22, r22
 89c:	77 1f       	adc	r23, r23
 89e:	88 1f       	adc	r24, r24
 8a0:	99 1f       	adc	r25, r25
 8a2:	1a f0       	brmi	.+6      	; 0x8aa <__fixunssfsi+0x24>
 8a4:	ba 95       	dec	r27
 8a6:	c9 f7       	brne	.-14     	; 0x89a <__fixunssfsi+0x14>
 8a8:	14 c0       	rjmp	.+40     	; 0x8d2 <__fixunssfsi+0x4c>
 8aa:	b1 30       	cpi	r27, 0x01	; 1
 8ac:	91 f0       	breq	.+36     	; 0x8d2 <__fixunssfsi+0x4c>
 8ae:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__fp_zero>
 8b2:	b1 e0       	ldi	r27, 0x01	; 1
 8b4:	08 95       	ret
 8b6:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__fp_zero>
 8ba:	67 2f       	mov	r22, r23
 8bc:	78 2f       	mov	r23, r24
 8be:	88 27       	eor	r24, r24
 8c0:	b8 5f       	subi	r27, 0xF8	; 248
 8c2:	39 f0       	breq	.+14     	; 0x8d2 <__fixunssfsi+0x4c>
 8c4:	b9 3f       	cpi	r27, 0xF9	; 249
 8c6:	cc f3       	brlt	.-14     	; 0x8ba <__fixunssfsi+0x34>
 8c8:	86 95       	lsr	r24
 8ca:	77 95       	ror	r23
 8cc:	67 95       	ror	r22
 8ce:	b3 95       	inc	r27
 8d0:	d9 f7       	brne	.-10     	; 0x8c8 <__fixunssfsi+0x42>
 8d2:	3e f4       	brtc	.+14     	; 0x8e2 <__fixunssfsi+0x5c>
 8d4:	90 95       	com	r25
 8d6:	80 95       	com	r24
 8d8:	70 95       	com	r23
 8da:	61 95       	neg	r22
 8dc:	7f 4f       	sbci	r23, 0xFF	; 255
 8de:	8f 4f       	sbci	r24, 0xFF	; 255
 8e0:	9f 4f       	sbci	r25, 0xFF	; 255
 8e2:	08 95       	ret

000008e4 <__floatunsisf>:
 8e4:	e8 94       	clt
 8e6:	09 c0       	rjmp	.+18     	; 0x8fa <__floatsisf+0x12>

000008e8 <__floatsisf>:
 8e8:	97 fb       	bst	r25, 7
 8ea:	3e f4       	brtc	.+14     	; 0x8fa <__floatsisf+0x12>
 8ec:	90 95       	com	r25
 8ee:	80 95       	com	r24
 8f0:	70 95       	com	r23
 8f2:	61 95       	neg	r22
 8f4:	7f 4f       	sbci	r23, 0xFF	; 255
 8f6:	8f 4f       	sbci	r24, 0xFF	; 255
 8f8:	9f 4f       	sbci	r25, 0xFF	; 255
 8fa:	99 23       	and	r25, r25
 8fc:	a9 f0       	breq	.+42     	; 0x928 <__floatsisf+0x40>
 8fe:	f9 2f       	mov	r31, r25
 900:	96 e9       	ldi	r25, 0x96	; 150
 902:	bb 27       	eor	r27, r27
 904:	93 95       	inc	r25
 906:	f6 95       	lsr	r31
 908:	87 95       	ror	r24
 90a:	77 95       	ror	r23
 90c:	67 95       	ror	r22
 90e:	b7 95       	ror	r27
 910:	f1 11       	cpse	r31, r1
 912:	f8 cf       	rjmp	.-16     	; 0x904 <__floatsisf+0x1c>
 914:	fa f4       	brpl	.+62     	; 0x954 <__floatsisf+0x6c>
 916:	bb 0f       	add	r27, r27
 918:	11 f4       	brne	.+4      	; 0x91e <__floatsisf+0x36>
 91a:	60 ff       	sbrs	r22, 0
 91c:	1b c0       	rjmp	.+54     	; 0x954 <__floatsisf+0x6c>
 91e:	6f 5f       	subi	r22, 0xFF	; 255
 920:	7f 4f       	sbci	r23, 0xFF	; 255
 922:	8f 4f       	sbci	r24, 0xFF	; 255
 924:	9f 4f       	sbci	r25, 0xFF	; 255
 926:	16 c0       	rjmp	.+44     	; 0x954 <__floatsisf+0x6c>
 928:	88 23       	and	r24, r24
 92a:	11 f0       	breq	.+4      	; 0x930 <__floatsisf+0x48>
 92c:	96 e9       	ldi	r25, 0x96	; 150
 92e:	11 c0       	rjmp	.+34     	; 0x952 <__floatsisf+0x6a>
 930:	77 23       	and	r23, r23
 932:	21 f0       	breq	.+8      	; 0x93c <__floatsisf+0x54>
 934:	9e e8       	ldi	r25, 0x8E	; 142
 936:	87 2f       	mov	r24, r23
 938:	76 2f       	mov	r23, r22
 93a:	05 c0       	rjmp	.+10     	; 0x946 <__floatsisf+0x5e>
 93c:	66 23       	and	r22, r22
 93e:	71 f0       	breq	.+28     	; 0x95c <__floatsisf+0x74>
 940:	96 e8       	ldi	r25, 0x86	; 134
 942:	86 2f       	mov	r24, r22
 944:	70 e0       	ldi	r23, 0x00	; 0
 946:	60 e0       	ldi	r22, 0x00	; 0
 948:	2a f0       	brmi	.+10     	; 0x954 <__floatsisf+0x6c>
 94a:	9a 95       	dec	r25
 94c:	66 0f       	add	r22, r22
 94e:	77 1f       	adc	r23, r23
 950:	88 1f       	adc	r24, r24
 952:	da f7       	brpl	.-10     	; 0x94a <__floatsisf+0x62>
 954:	88 0f       	add	r24, r24
 956:	96 95       	lsr	r25
 958:	87 95       	ror	r24
 95a:	97 f9       	bld	r25, 7
 95c:	08 95       	ret

0000095e <__fp_cmp>:
 95e:	99 0f       	add	r25, r25
 960:	00 08       	sbc	r0, r0
 962:	55 0f       	add	r21, r21
 964:	aa 0b       	sbc	r26, r26
 966:	e0 e8       	ldi	r30, 0x80	; 128
 968:	fe ef       	ldi	r31, 0xFE	; 254
 96a:	16 16       	cp	r1, r22
 96c:	17 06       	cpc	r1, r23
 96e:	e8 07       	cpc	r30, r24
 970:	f9 07       	cpc	r31, r25
 972:	c0 f0       	brcs	.+48     	; 0x9a4 <__fp_cmp+0x46>
 974:	12 16       	cp	r1, r18
 976:	13 06       	cpc	r1, r19
 978:	e4 07       	cpc	r30, r20
 97a:	f5 07       	cpc	r31, r21
 97c:	98 f0       	brcs	.+38     	; 0x9a4 <__fp_cmp+0x46>
 97e:	62 1b       	sub	r22, r18
 980:	73 0b       	sbc	r23, r19
 982:	84 0b       	sbc	r24, r20
 984:	95 0b       	sbc	r25, r21
 986:	39 f4       	brne	.+14     	; 0x996 <__fp_cmp+0x38>
 988:	0a 26       	eor	r0, r26
 98a:	61 f0       	breq	.+24     	; 0x9a4 <__fp_cmp+0x46>
 98c:	23 2b       	or	r18, r19
 98e:	24 2b       	or	r18, r20
 990:	25 2b       	or	r18, r21
 992:	21 f4       	brne	.+8      	; 0x99c <__fp_cmp+0x3e>
 994:	08 95       	ret
 996:	0a 26       	eor	r0, r26
 998:	09 f4       	brne	.+2      	; 0x99c <__fp_cmp+0x3e>
 99a:	a1 40       	sbci	r26, 0x01	; 1
 99c:	a6 95       	lsr	r26
 99e:	8f ef       	ldi	r24, 0xFF	; 255
 9a0:	81 1d       	adc	r24, r1
 9a2:	81 1d       	adc	r24, r1
 9a4:	08 95       	ret

000009a6 <__fp_inf>:
 9a6:	97 f9       	bld	r25, 7
 9a8:	9f 67       	ori	r25, 0x7F	; 127
 9aa:	80 e8       	ldi	r24, 0x80	; 128
 9ac:	70 e0       	ldi	r23, 0x00	; 0
 9ae:	60 e0       	ldi	r22, 0x00	; 0
 9b0:	08 95       	ret

000009b2 <__fp_nan>:
 9b2:	9f ef       	ldi	r25, 0xFF	; 255
 9b4:	80 ec       	ldi	r24, 0xC0	; 192
 9b6:	08 95       	ret

000009b8 <__fp_pscA>:
 9b8:	00 24       	eor	r0, r0
 9ba:	0a 94       	dec	r0
 9bc:	16 16       	cp	r1, r22
 9be:	17 06       	cpc	r1, r23
 9c0:	18 06       	cpc	r1, r24
 9c2:	09 06       	cpc	r0, r25
 9c4:	08 95       	ret

000009c6 <__fp_pscB>:
 9c6:	00 24       	eor	r0, r0
 9c8:	0a 94       	dec	r0
 9ca:	12 16       	cp	r1, r18
 9cc:	13 06       	cpc	r1, r19
 9ce:	14 06       	cpc	r1, r20
 9d0:	05 06       	cpc	r0, r21
 9d2:	08 95       	ret

000009d4 <__fp_round>:
 9d4:	09 2e       	mov	r0, r25
 9d6:	03 94       	inc	r0
 9d8:	00 0c       	add	r0, r0
 9da:	11 f4       	brne	.+4      	; 0x9e0 <__fp_round+0xc>
 9dc:	88 23       	and	r24, r24
 9de:	52 f0       	brmi	.+20     	; 0x9f4 <__fp_round+0x20>
 9e0:	bb 0f       	add	r27, r27
 9e2:	40 f4       	brcc	.+16     	; 0x9f4 <__fp_round+0x20>
 9e4:	bf 2b       	or	r27, r31
 9e6:	11 f4       	brne	.+4      	; 0x9ec <__fp_round+0x18>
 9e8:	60 ff       	sbrs	r22, 0
 9ea:	04 c0       	rjmp	.+8      	; 0x9f4 <__fp_round+0x20>
 9ec:	6f 5f       	subi	r22, 0xFF	; 255
 9ee:	7f 4f       	sbci	r23, 0xFF	; 255
 9f0:	8f 4f       	sbci	r24, 0xFF	; 255
 9f2:	9f 4f       	sbci	r25, 0xFF	; 255
 9f4:	08 95       	ret

000009f6 <__fp_split3>:
 9f6:	57 fd       	sbrc	r21, 7
 9f8:	90 58       	subi	r25, 0x80	; 128
 9fa:	44 0f       	add	r20, r20
 9fc:	55 1f       	adc	r21, r21
 9fe:	59 f0       	breq	.+22     	; 0xa16 <__fp_splitA+0x10>
 a00:	5f 3f       	cpi	r21, 0xFF	; 255
 a02:	71 f0       	breq	.+28     	; 0xa20 <__fp_splitA+0x1a>
 a04:	47 95       	ror	r20

00000a06 <__fp_splitA>:
 a06:	88 0f       	add	r24, r24
 a08:	97 fb       	bst	r25, 7
 a0a:	99 1f       	adc	r25, r25
 a0c:	61 f0       	breq	.+24     	; 0xa26 <__fp_splitA+0x20>
 a0e:	9f 3f       	cpi	r25, 0xFF	; 255
 a10:	79 f0       	breq	.+30     	; 0xa30 <__fp_splitA+0x2a>
 a12:	87 95       	ror	r24
 a14:	08 95       	ret
 a16:	12 16       	cp	r1, r18
 a18:	13 06       	cpc	r1, r19
 a1a:	14 06       	cpc	r1, r20
 a1c:	55 1f       	adc	r21, r21
 a1e:	f2 cf       	rjmp	.-28     	; 0xa04 <__fp_split3+0xe>
 a20:	46 95       	lsr	r20
 a22:	f1 df       	rcall	.-30     	; 0xa06 <__fp_splitA>
 a24:	08 c0       	rjmp	.+16     	; 0xa36 <__fp_splitA+0x30>
 a26:	16 16       	cp	r1, r22
 a28:	17 06       	cpc	r1, r23
 a2a:	18 06       	cpc	r1, r24
 a2c:	99 1f       	adc	r25, r25
 a2e:	f1 cf       	rjmp	.-30     	; 0xa12 <__fp_splitA+0xc>
 a30:	86 95       	lsr	r24
 a32:	71 05       	cpc	r23, r1
 a34:	61 05       	cpc	r22, r1
 a36:	08 94       	sec
 a38:	08 95       	ret

00000a3a <__fp_zero>:
 a3a:	e8 94       	clt

00000a3c <__fp_szero>:
 a3c:	bb 27       	eor	r27, r27
 a3e:	66 27       	eor	r22, r22
 a40:	77 27       	eor	r23, r23
 a42:	cb 01       	movw	r24, r22
 a44:	97 f9       	bld	r25, 7
 a46:	08 95       	ret

00000a48 <__mulsf3>:
 a48:	0e 94 37 05 	call	0xa6e	; 0xa6e <__mulsf3x>
 a4c:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__fp_round>
 a50:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__fp_pscA>
 a54:	38 f0       	brcs	.+14     	; 0xa64 <__mulsf3+0x1c>
 a56:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fp_pscB>
 a5a:	20 f0       	brcs	.+8      	; 0xa64 <__mulsf3+0x1c>
 a5c:	95 23       	and	r25, r21
 a5e:	11 f0       	breq	.+4      	; 0xa64 <__mulsf3+0x1c>
 a60:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_inf>
 a64:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__fp_nan>
 a68:	11 24       	eor	r1, r1
 a6a:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__fp_szero>

00000a6e <__mulsf3x>:
 a6e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__fp_split3>
 a72:	70 f3       	brcs	.-36     	; 0xa50 <__mulsf3+0x8>

00000a74 <__mulsf3_pse>:
 a74:	95 9f       	mul	r25, r21
 a76:	c1 f3       	breq	.-16     	; 0xa68 <__mulsf3+0x20>
 a78:	95 0f       	add	r25, r21
 a7a:	50 e0       	ldi	r21, 0x00	; 0
 a7c:	55 1f       	adc	r21, r21
 a7e:	62 9f       	mul	r22, r18
 a80:	f0 01       	movw	r30, r0
 a82:	72 9f       	mul	r23, r18
 a84:	bb 27       	eor	r27, r27
 a86:	f0 0d       	add	r31, r0
 a88:	b1 1d       	adc	r27, r1
 a8a:	63 9f       	mul	r22, r19
 a8c:	aa 27       	eor	r26, r26
 a8e:	f0 0d       	add	r31, r0
 a90:	b1 1d       	adc	r27, r1
 a92:	aa 1f       	adc	r26, r26
 a94:	64 9f       	mul	r22, r20
 a96:	66 27       	eor	r22, r22
 a98:	b0 0d       	add	r27, r0
 a9a:	a1 1d       	adc	r26, r1
 a9c:	66 1f       	adc	r22, r22
 a9e:	82 9f       	mul	r24, r18
 aa0:	22 27       	eor	r18, r18
 aa2:	b0 0d       	add	r27, r0
 aa4:	a1 1d       	adc	r26, r1
 aa6:	62 1f       	adc	r22, r18
 aa8:	73 9f       	mul	r23, r19
 aaa:	b0 0d       	add	r27, r0
 aac:	a1 1d       	adc	r26, r1
 aae:	62 1f       	adc	r22, r18
 ab0:	83 9f       	mul	r24, r19
 ab2:	a0 0d       	add	r26, r0
 ab4:	61 1d       	adc	r22, r1
 ab6:	22 1f       	adc	r18, r18
 ab8:	74 9f       	mul	r23, r20
 aba:	33 27       	eor	r19, r19
 abc:	a0 0d       	add	r26, r0
 abe:	61 1d       	adc	r22, r1
 ac0:	23 1f       	adc	r18, r19
 ac2:	84 9f       	mul	r24, r20
 ac4:	60 0d       	add	r22, r0
 ac6:	21 1d       	adc	r18, r1
 ac8:	82 2f       	mov	r24, r18
 aca:	76 2f       	mov	r23, r22
 acc:	6a 2f       	mov	r22, r26
 ace:	11 24       	eor	r1, r1
 ad0:	9f 57       	subi	r25, 0x7F	; 127
 ad2:	50 40       	sbci	r21, 0x00	; 0
 ad4:	9a f0       	brmi	.+38     	; 0xafc <__mulsf3_pse+0x88>
 ad6:	f1 f0       	breq	.+60     	; 0xb14 <__mulsf3_pse+0xa0>
 ad8:	88 23       	and	r24, r24
 ada:	4a f0       	brmi	.+18     	; 0xaee <__mulsf3_pse+0x7a>
 adc:	ee 0f       	add	r30, r30
 ade:	ff 1f       	adc	r31, r31
 ae0:	bb 1f       	adc	r27, r27
 ae2:	66 1f       	adc	r22, r22
 ae4:	77 1f       	adc	r23, r23
 ae6:	88 1f       	adc	r24, r24
 ae8:	91 50       	subi	r25, 0x01	; 1
 aea:	50 40       	sbci	r21, 0x00	; 0
 aec:	a9 f7       	brne	.-22     	; 0xad8 <__mulsf3_pse+0x64>
 aee:	9e 3f       	cpi	r25, 0xFE	; 254
 af0:	51 05       	cpc	r21, r1
 af2:	80 f0       	brcs	.+32     	; 0xb14 <__mulsf3_pse+0xa0>
 af4:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_inf>
 af8:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__fp_szero>
 afc:	5f 3f       	cpi	r21, 0xFF	; 255
 afe:	e4 f3       	brlt	.-8      	; 0xaf8 <__mulsf3_pse+0x84>
 b00:	98 3e       	cpi	r25, 0xE8	; 232
 b02:	d4 f3       	brlt	.-12     	; 0xaf8 <__mulsf3_pse+0x84>
 b04:	86 95       	lsr	r24
 b06:	77 95       	ror	r23
 b08:	67 95       	ror	r22
 b0a:	b7 95       	ror	r27
 b0c:	f7 95       	ror	r31
 b0e:	e7 95       	ror	r30
 b10:	9f 5f       	subi	r25, 0xFF	; 255
 b12:	c1 f7       	brne	.-16     	; 0xb04 <__mulsf3_pse+0x90>
 b14:	fe 2b       	or	r31, r30
 b16:	88 0f       	add	r24, r24
 b18:	91 1d       	adc	r25, r1
 b1a:	96 95       	lsr	r25
 b1c:	87 95       	ror	r24
 b1e:	97 f9       	bld	r25, 7
 b20:	08 95       	ret

00000b22 <_exit>:
 b22:	f8 94       	cli

00000b24 <__stop_program>:
 b24:	ff cf       	rjmp	.-2      	; 0xb24 <__stop_program>
