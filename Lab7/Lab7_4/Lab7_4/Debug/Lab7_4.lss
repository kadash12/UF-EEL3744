
Lab7_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000047c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000004f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00802000  00802000  000004f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004876  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003cdb  00000000  00000000  00004e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000072e  00000000  00000000  00008b19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00009248  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000040c8  00000000  00000000  00009370  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000021f  00000000  00000000  0000d438  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000d657  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__vector_71>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a4 30       	cpi	r26, 0x04	; 4
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 7f 01 	call	0x2fe	; 0x2fe <main>
 228:	0c 94 3c 02 	jmp	0x478	; 0x478 <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <tcc0_init>:
//Global Variables to store output
int16_t test = 0;	//Digit output
volatile int global_flag = 0;	//Global flag of interrupt

//Initialize TCC0 timer
void tcc0_init(void){
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	1f 92       	push	r1
 236:	1f 92       	push	r1
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
	//SCK = 2MHz, Prescaler = 1024,
	int period = 5000;	//100 Hz
 23c:	88 e8       	ldi	r24, 0x88	; 136
 23e:	93 e1       	ldi	r25, 0x13	; 19
 240:	89 83       	std	Y+1, r24	; 0x01
 242:	9a 83       	std	Y+2, r25	; 0x02
	
	//Set period
	TCC0_PERL = (uint8_t) period;	//Low Period
 244:	86 e2       	ldi	r24, 0x26	; 38
 246:	98 e0       	ldi	r25, 0x08	; 8
 248:	29 81       	ldd	r18, Y+1	; 0x01
 24a:	fc 01       	movw	r30, r24
 24c:	20 83       	st	Z, r18
	TCC0_PERH = (uint8_t) (period>>8);	//High Period
 24e:	87 e2       	ldi	r24, 0x27	; 39
 250:	98 e0       	ldi	r25, 0x08	; 8
 252:	29 81       	ldd	r18, Y+1	; 0x01
 254:	3a 81       	ldd	r19, Y+2	; 0x02
 256:	23 2f       	mov	r18, r19
 258:	33 0f       	add	r19, r19
 25a:	33 0b       	sbc	r19, r19
 25c:	fc 01       	movw	r30, r24
 25e:	20 83       	st	Z, r18

	//Normal mode timer
	TCC0_CTRLB = 0x00;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	98 e0       	ldi	r25, 0x08	; 8
 264:	fc 01       	movw	r30, r24
 266:	10 82       	st	Z, r1
	
	//Trigger an event on Event Channel 0
	EVSYS_CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
 268:	80 e8       	ldi	r24, 0x80	; 128
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	20 ec       	ldi	r18, 0xC0	; 192
 26e:	fc 01       	movw	r30, r24
 270:	20 83       	st	Z, r18

	//Set perscaler = 1024
	TCC0_CTRLA = 0x03;
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	98 e0       	ldi	r25, 0x08	; 8
 276:	23 e0       	ldi	r18, 0x03	; 3
 278:	fc 01       	movw	r30, r24
 27a:	20 83       	st	Z, r18
}
 27c:	00 00       	nop
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <adc_init>:

//Initialize ADC
void adc_init(void){
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	cd b7       	in	r28, 0x3d	; 61
 28e:	de b7       	in	r29, 0x3e	; 62
	//12-bit signed, right-adjusted, Normal, 2.5Vref
	ADCA_CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	92 e0       	ldi	r25, 0x02	; 2
 294:	20 e1       	ldi	r18, 0x10	; 16
 296:	fc 01       	movw	r30, r24
 298:	20 83       	st	Z, r18
	ADCA_REFCTRL = ADC_REFSEL_AREFB_gc;		//2.5Vref
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	92 e0       	ldi	r25, 0x02	; 2
 29e:	20 e3       	ldi	r18, 0x30	; 48
 2a0:	fc 01       	movw	r30, r24
 2a2:	20 83       	st	Z, r18
	
	//ADC Clock prescaler=512
	ADCA_PRESCALER = ADC_PRESCALER_DIV512_gc;
 2a4:	84 e0       	ldi	r24, 0x04	; 4
 2a6:	92 e0       	ldi	r25, 0x02	; 2
 2a8:	27 e0       	ldi	r18, 0x07	; 7
 2aa:	fc 01       	movw	r30, r24
 2ac:	20 83       	st	Z, r18

	//Enable Port A
	PORTA_DIRCLR = PIN1_bm | PIN6_bm;	//PortA input pins
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	96 e0       	ldi	r25, 0x06	; 6
 2b2:	22 e4       	ldi	r18, 0x42	; 66
 2b4:	fc 01       	movw	r30, r24
 2b6:	20 83       	st	Z, r18

	//Differential input signal with gain
	ADCA_CH0_CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc;
 2b8:	80 e2       	ldi	r24, 0x20	; 32
 2ba:	92 e0       	ldi	r25, 0x02	; 2
 2bc:	23 e0       	ldi	r18, 0x03	; 3
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
	
	//MUXCTRL pin1 + and pin6 -
	ADCA_CH0_MUXCTRL = ADC_CH_MUXPOS_PIN1_gc | ADC_CH_MUXNEG_PIN6_gc;
 2c2:	81 e2       	ldi	r24, 0x21	; 33
 2c4:	92 e0       	ldi	r25, 0x02	; 2
 2c6:	2a e0       	ldi	r18, 0x0A	; 10
 2c8:	fc 01       	movw	r30, r24
 2ca:	20 83       	st	Z, r18
	
	//Setup ADC Low Level interrupt
	ADCA_CH0_INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;	//Triggered on flag- when a conversion is complete
 2cc:	82 e2       	ldi	r24, 0x22	; 34
 2ce:	92 e0       	ldi	r25, 0x02	; 2
 2d0:	21 e0       	ldi	r18, 0x01	; 1
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18

	//Enable Low Level interrupts
	PMIC_CTRL = PMIC_LOLVLEN_bm;
 2d6:	82 ea       	ldi	r24, 0xA2	; 162
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	21 e0       	ldi	r18, 0x01	; 1
 2dc:	fc 01       	movw	r30, r24
 2de:	20 83       	st	Z, r18
	//Enable global enable interrupts
	sei();
 2e0:	78 94       	sei

	//ADC conversion start when Event Channel 0 is triggered
	ADCA_EVCTRL = ADC_SWEEP_0_gc | ADC_EVSEL_0123_gc | ADC_EVACT_CH0_gc;
 2e2:	83 e0       	ldi	r24, 0x03	; 3
 2e4:	92 e0       	ldi	r25, 0x02	; 2
 2e6:	21 e0       	ldi	r18, 0x01	; 1
 2e8:	fc 01       	movw	r30, r24
 2ea:	20 83       	st	Z, r18
	
	//Enable ADC
	ADCA_CTRLA = ADC_ENABLE_bm;
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	92 e0       	ldi	r25, 0x02	; 2
 2f0:	21 e0       	ldi	r18, 0x01	; 1
 2f2:	fc 01       	movw	r30, r24
 2f4:	20 83       	st	Z, r18
}
 2f6:	00 00       	nop
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <main>:

int main(void){
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
	//Initialize
	PORTD_OUTSET = BLUE_PWM_LED;	//LED initially off
 306:	85 e6       	ldi	r24, 0x65	; 101
 308:	96 e0       	ldi	r25, 0x06	; 6
 30a:	20 e4       	ldi	r18, 0x40	; 64
 30c:	fc 01       	movw	r30, r24
 30e:	20 83       	st	Z, r18
	PORTD_DIRSET = BLUE_PWM_LED;	//Set output
 310:	81 e6       	ldi	r24, 0x61	; 97
 312:	96 e0       	ldi	r25, 0x06	; 6
 314:	20 e4       	ldi	r18, 0x40	; 64
 316:	fc 01       	movw	r30, r24
 318:	20 83       	st	Z, r18
	
	adc_init();
 31a:	0e 94 44 01 	call	0x288	; 0x288 <adc_init>
	tcc0_init();
 31e:	0e 94 18 01 	call	0x230	; 0x230 <tcc0_init>
	usartd0_init();
 322:	0e 94 f7 01 	call	0x3ee	; 0x3ee <usartd0_init>
	
	//Loop conversion
	while (1){
		//Output voltage when global flag gets set
		if (global_flag){
 326:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <global_flag>
 32a:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <global_flag+0x1>
 32e:	89 2b       	or	r24, r25
 330:	d1 f3       	breq	.-12     	; 0x326 <main+0x28>
			//Reset
			global_flag = 0;
 332:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <global_flag>
 336:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <global_flag+0x1>
			//Output
			usartd0_out_char(((uint8_t) test) + '0' );	//LSB
 33a:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 33e:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 342:	80 5d       	subi	r24, 0xD0	; 208
 344:	0e 94 21 02 	call	0x442	; 0x442 <usartd0_out_char>
			usartd0_out_char(((uint8_t) (test >> 8)) + '0');	//MSB
 348:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 34c:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 350:	89 2f       	mov	r24, r25
 352:	99 27       	eor	r25, r25
 354:	80 5d       	subi	r24, 0xD0	; 208
 356:	0e 94 21 02 	call	0x442	; 0x442 <usartd0_out_char>
			}
	}
 35a:	e5 cf       	rjmp	.-54     	; 0x326 <main+0x28>

0000035c <__vector_71>:
	return 0;
}

//Interrupt Handler
ISR(ADCA_CH0_vect){
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 364:	0f 92       	push	r0
 366:	11 24       	eor	r1, r1
 368:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 36c:	0f 92       	push	r0
 36e:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 372:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 376:	0f 92       	push	r0
 378:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 37c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 380:	0f 92       	push	r0
 382:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 386:	2f 93       	push	r18
 388:	8f 93       	push	r24
 38a:	9f 93       	push	r25
 38c:	ef 93       	push	r30
 38e:	ff 93       	push	r31
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
	//Test ADC value
	test = ADCA_CH0_RES;
 398:	84 e2       	ldi	r24, 0x24	; 36
 39a:	92 e0       	ldi	r25, 0x02	; 2
 39c:	fc 01       	movw	r30, r24
 39e:	80 81       	ld	r24, Z
 3a0:	91 81       	ldd	r25, Z+1	; 0x01
 3a2:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
 3a6:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <_edata+0x1>

	//Set global flag
	global_flag = 1;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <global_flag>
 3b2:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <global_flag+0x1>
	
	//Turn off the BLUE_PWM LED
	PORTD_OUTTGL = BLUE_PWM_LED;
 3b6:	87 e6       	ldi	r24, 0x67	; 103
 3b8:	96 e0       	ldi	r25, 0x06	; 6
 3ba:	20 e4       	ldi	r18, 0x40	; 64
 3bc:	fc 01       	movw	r30, r24
 3be:	20 83       	st	Z, r18
}
 3c0:	00 00       	nop
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	ff 91       	pop	r31
 3c8:	ef 91       	pop	r30
 3ca:	9f 91       	pop	r25
 3cc:	8f 91       	pop	r24
 3ce:	2f 91       	pop	r18
 3d0:	0f 90       	pop	r0
 3d2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 3d6:	0f 90       	pop	r0
 3d8:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 3dc:	0f 90       	pop	r0
 3de:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 3e2:	0f 90       	pop	r0
 3e4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 3e8:	0f 90       	pop	r0
 3ea:	1f 90       	pop	r1
 3ec:	18 95       	reti

000003ee <usartd0_init>:
*/

#include <avr/io.h>

//USART Initialization
void usartd0_init(void){
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	cd b7       	in	r28, 0x3d	; 61
 3f4:	de b7       	in	r29, 0x3e	; 62
	//Configure TxD and RxD pins
	PORTD.OUTSET = PIN3_bm;
 3f6:	80 e6       	ldi	r24, 0x60	; 96
 3f8:	96 e0       	ldi	r25, 0x06	; 6
 3fa:	28 e0       	ldi	r18, 0x08	; 8
 3fc:	fc 01       	movw	r30, r24
 3fe:	25 83       	std	Z+5, r18	; 0x05
	PORTD.DIRSET = PIN3_bm;
 400:	80 e6       	ldi	r24, 0x60	; 96
 402:	96 e0       	ldi	r25, 0x06	; 6
 404:	28 e0       	ldi	r18, 0x08	; 8
 406:	fc 01       	movw	r30, r24
 408:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 40a:	80 e6       	ldi	r24, 0x60	; 96
 40c:	96 e0       	ldi	r25, 0x06	; 6
 40e:	24 e0       	ldi	r18, 0x04	; 4
 410:	fc 01       	movw	r30, r24
 412:	22 83       	std	Z+2, r18	; 0x02
	
	//Baud rate: At 2 MHz, 0 BSEL, -3 BSCALE corresponds to 128000 bps */
	USARTD0.BAUDCTRLA = (uint8_t)0;
 414:	80 ea       	ldi	r24, 0xA0	; 160
 416:	99 e0       	ldi	r25, 0x09	; 9
 418:	fc 01       	movw	r30, r24
 41a:	16 82       	std	Z+6, r1	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)( (-3 << 4) | (0 >> 8));
 41c:	80 ea       	ldi	r24, 0xA0	; 160
 41e:	99 e0       	ldi	r25, 0x09	; 9
 420:	20 ed       	ldi	r18, 0xD0	; 208
 422:	fc 01       	movw	r30, r24
 424:	27 83       	std	Z+7, r18	; 0x07

	//8 data bits, no parity, and one stop bit.
	USARTD0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc & ~USART_SBMODE_bm;
 426:	80 ea       	ldi	r24, 0xA0	; 160
 428:	99 e0       	ldi	r25, 0x09	; 9
 42a:	23 e0       	ldi	r18, 0x03	; 3
 42c:	fc 01       	movw	r30, r24
 42e:	25 83       	std	Z+5, r18	; 0x05

	//Enable Receiver and/or Transmitter
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 430:	80 ea       	ldi	r24, 0xA0	; 160
 432:	99 e0       	ldi	r25, 0x09	; 9
 434:	28 e1       	ldi	r18, 0x18	; 24
 436:	fc 01       	movw	r30, r24
 438:	24 83       	std	Z+4, r18	; 0x04
}
 43a:	00 00       	nop
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	08 95       	ret

00000442 <usartd0_out_char>:

//Output character
void usartd0_out_char(char output){
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	1f 92       	push	r1
 448:	cd b7       	in	r28, 0x3d	; 61
 44a:	de b7       	in	r29, 0x3e	; 62
 44c:	89 83       	std	Y+1, r24	; 0x01
	//Wait till transmission is done
	while(!(USARTD0.STATUS & USART_DREIF_bm));
 44e:	00 00       	nop
 450:	80 ea       	ldi	r24, 0xA0	; 160
 452:	99 e0       	ldi	r25, 0x09	; 9
 454:	fc 01       	movw	r30, r24
 456:	81 81       	ldd	r24, Z+1	; 0x01
 458:	88 2f       	mov	r24, r24
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	80 72       	andi	r24, 0x20	; 32
 45e:	99 27       	eor	r25, r25
 460:	89 2b       	or	r24, r25
 462:	b1 f3       	breq	.-20     	; 0x450 <usartd0_out_char+0xe>
	USARTD0.DATA = output;	//output c
 464:	80 ea       	ldi	r24, 0xA0	; 160
 466:	99 e0       	ldi	r25, 0x09	; 9
 468:	29 81       	ldd	r18, Y+1	; 0x01
 46a:	fc 01       	movw	r30, r24
 46c:	20 83       	st	Z, r18
}
 46e:	00 00       	nop
 470:	0f 90       	pop	r0
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	08 95       	ret

00000478 <_exit>:
 478:	f8 94       	cli

0000047a <__stop_program>:
 47a:	ff cf       	rjmp	.-2      	; 0x47a <__stop_program>
