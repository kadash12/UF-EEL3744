
quiz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000060c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00802000  00802000  00000680  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004986  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003d17  00000000  00000000  000050e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007d9  00000000  00000000  00008dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  000095d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000413d  00000000  00000000  00009744  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b5  00000000  00000000  0000d881  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000db36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__vector_71>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__vector_88>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a7 30       	cpi	r26, 0x07	; 7
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 84 01 	call	0x308	; 0x308 <main>
 228:	0c 94 04 03 	jmp	0x608	; 0x608 <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <tcc0_init>:
volatile int tflag = 0;	//Conversion flag
volatile int rflag = 0;	//Receiver flag
volatile char c;

//Initialize TCC0 timer
void tcc0_init(void){
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	1f 92       	push	r1
 236:	1f 92       	push	r1
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
	//SCK = 2MHz, Prescaler = 1024,
	int period = 5000;	//100 Hz
 23c:	88 e8       	ldi	r24, 0x88	; 136
 23e:	93 e1       	ldi	r25, 0x13	; 19
 240:	89 83       	std	Y+1, r24	; 0x01
 242:	9a 83       	std	Y+2, r25	; 0x02
	
	//Set period
	TCC0_PERL = (uint8_t) period;	//Low Period
 244:	86 e2       	ldi	r24, 0x26	; 38
 246:	98 e0       	ldi	r25, 0x08	; 8
 248:	29 81       	ldd	r18, Y+1	; 0x01
 24a:	fc 01       	movw	r30, r24
 24c:	20 83       	st	Z, r18
	TCC0_PERH = (uint8_t) (period>>8);	//High Period
 24e:	87 e2       	ldi	r24, 0x27	; 39
 250:	98 e0       	ldi	r25, 0x08	; 8
 252:	29 81       	ldd	r18, Y+1	; 0x01
 254:	3a 81       	ldd	r19, Y+2	; 0x02
 256:	23 2f       	mov	r18, r19
 258:	33 0f       	add	r19, r19
 25a:	33 0b       	sbc	r19, r19
 25c:	fc 01       	movw	r30, r24
 25e:	20 83       	st	Z, r18

	//Normal mode timer
	TCC0_CTRLB = 0x00;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	98 e0       	ldi	r25, 0x08	; 8
 264:	fc 01       	movw	r30, r24
 266:	10 82       	st	Z, r1
	
	//Trigger an event on Event Channel 0
	EVSYS_CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
 268:	80 e8       	ldi	r24, 0x80	; 128
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	20 ec       	ldi	r18, 0xC0	; 192
 26e:	fc 01       	movw	r30, r24
 270:	20 83       	st	Z, r18

	//Set perscaler = 1024
	TCC0_CTRLA = 0x03;
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	98 e0       	ldi	r25, 0x08	; 8
 276:	23 e0       	ldi	r18, 0x03	; 3
 278:	fc 01       	movw	r30, r24
 27a:	20 83       	st	Z, r18
}
 27c:	00 00       	nop
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <adc_init>:

//Initialize ADC
void adc_init(void){
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	cd b7       	in	r28, 0x3d	; 61
 28e:	de b7       	in	r29, 0x3e	; 62
	//12-bit signed, right-adjusted, Normal, 2.5Vref
	ADCA_CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	92 e0       	ldi	r25, 0x02	; 2
 294:	20 e1       	ldi	r18, 0x10	; 16
 296:	fc 01       	movw	r30, r24
 298:	20 83       	st	Z, r18
	ADCA_REFCTRL = ADC_REFSEL_AREFB_gc;		//2.5Vref
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	92 e0       	ldi	r25, 0x02	; 2
 29e:	20 e3       	ldi	r18, 0x30	; 48
 2a0:	fc 01       	movw	r30, r24
 2a2:	20 83       	st	Z, r18
	
	//ADC Clock prescaler=512
	ADCA_PRESCALER = ADC_PRESCALER_DIV512_gc;
 2a4:	84 e0       	ldi	r24, 0x04	; 4
 2a6:	92 e0       	ldi	r25, 0x02	; 2
 2a8:	27 e0       	ldi	r18, 0x07	; 7
 2aa:	fc 01       	movw	r30, r24
 2ac:	20 83       	st	Z, r18

	//Enable Port A
	PORTA_DIRCLR = PIN1_bm | PIN6_bm;	//PortA input pins
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	96 e0       	ldi	r25, 0x06	; 6
 2b2:	22 e4       	ldi	r18, 0x42	; 66
 2b4:	fc 01       	movw	r30, r24
 2b6:	20 83       	st	Z, r18
	PORTA_DIRCLR = PIN4_bm | PIN5_bm;	//PortA input pins
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	96 e0       	ldi	r25, 0x06	; 6
 2bc:	20 e3       	ldi	r18, 0x30	; 48
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18

	//Differential input signal with gain
	ADCA_CH0_CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc;
 2c2:	80 e2       	ldi	r24, 0x20	; 32
 2c4:	92 e0       	ldi	r25, 0x02	; 2
 2c6:	23 e0       	ldi	r18, 0x03	; 3
 2c8:	fc 01       	movw	r30, r24
 2ca:	20 83       	st	Z, r18
	
	//MUXCTRL pin1 + and pin6 -
	ADCA_CH0_MUXCTRL = ADC_CH_MUXPOS_PIN1_gc | ADC_CH_MUXNEG_PIN6_gc;
 2cc:	81 e2       	ldi	r24, 0x21	; 33
 2ce:	92 e0       	ldi	r25, 0x02	; 2
 2d0:	2a e0       	ldi	r18, 0x0A	; 10
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18
	
	//Setup ADC Low Level interrupt
	ADCA_CH0_INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;	//Triggered on flag- when a conversion is complete
 2d6:	82 e2       	ldi	r24, 0x22	; 34
 2d8:	92 e0       	ldi	r25, 0x02	; 2
 2da:	21 e0       	ldi	r18, 0x01	; 1
 2dc:	fc 01       	movw	r30, r24
 2de:	20 83       	st	Z, r18

	//Enable Low Level interrupts
	PMIC_CTRL = PMIC_LOLVLEN_bm;
 2e0:	82 ea       	ldi	r24, 0xA2	; 162
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	21 e0       	ldi	r18, 0x01	; 1
 2e6:	fc 01       	movw	r30, r24
 2e8:	20 83       	st	Z, r18
	//Enable global enable interrupts
	sei();
 2ea:	78 94       	sei

	//ADC conversion start when Event Channel 0 is triggered
	ADCA_EVCTRL = ADC_SWEEP_0_gc | ADC_EVSEL_0123_gc | ADC_EVACT_CH0_gc;
 2ec:	83 e0       	ldi	r24, 0x03	; 3
 2ee:	92 e0       	ldi	r25, 0x02	; 2
 2f0:	21 e0       	ldi	r18, 0x01	; 1
 2f2:	fc 01       	movw	r30, r24
 2f4:	20 83       	st	Z, r18
	
	//Enable ADC
	ADCA_CTRLA = ADC_ENABLE_bm;
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	92 e0       	ldi	r25, 0x02	; 2
 2fa:	21 e0       	ldi	r18, 0x01	; 1
 2fc:	fc 01       	movw	r30, r24
 2fe:	20 83       	st	Z, r18
}
 300:	00 00       	nop
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <main>:

int main(void){
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
	//Initialize
	PORTD_OUTSET = BLUE_PWM_LED;	//LED initially off
 310:	85 e6       	ldi	r24, 0x65	; 101
 312:	96 e0       	ldi	r25, 0x06	; 6
 314:	20 e4       	ldi	r18, 0x40	; 64
 316:	fc 01       	movw	r30, r24
 318:	20 83       	st	Z, r18
	PORTD_DIRSET = BLUE_PWM_LED;	//Set output
 31a:	81 e6       	ldi	r24, 0x61	; 97
 31c:	96 e0       	ldi	r25, 0x06	; 6
 31e:	20 e4       	ldi	r18, 0x40	; 64
 320:	fc 01       	movw	r30, r24
 322:	20 83       	st	Z, r18
	PORTA_OUTSET |= PIN5_bm;	//Control J3
 324:	85 e0       	ldi	r24, 0x05	; 5
 326:	96 e0       	ldi	r25, 0x06	; 6
 328:	25 e0       	ldi	r18, 0x05	; 5
 32a:	36 e0       	ldi	r19, 0x06	; 6
 32c:	f9 01       	movw	r30, r18
 32e:	20 81       	ld	r18, Z
 330:	20 62       	ori	r18, 0x20	; 32
 332:	fc 01       	movw	r30, r24
 334:	20 83       	st	Z, r18
	PORTA_DIRSET |= PIN5_bm;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	96 e0       	ldi	r25, 0x06	; 6
 33a:	21 e0       	ldi	r18, 0x01	; 1
 33c:	36 e0       	ldi	r19, 0x06	; 6
 33e:	f9 01       	movw	r30, r18
 340:	20 81       	ld	r18, Z
 342:	20 62       	ori	r18, 0x20	; 32
 344:	fc 01       	movw	r30, r24
 346:	20 83       	st	Z, r18
	
	tcc0_init();
 348:	0e 94 18 01 	call	0x230	; 0x230 <tcc0_init>
	usartd0_init();
 34c:	0e 94 ba 02 	call	0x574	; 0x574 <usartd0_init>
	adc_init();
 350:	0e 94 44 01 	call	0x288	; 0x288 <adc_init>
	
	//Loop conversion
	while (1){
		//Get input
		if (rflag || tflag){
 354:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <rflag>
 358:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <rflag+0x1>
 35c:	89 2b       	or	r24, r25
 35e:	31 f4       	brne	.+12     	; 0x36c <main+0x64>
 360:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <tflag>
 364:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <tflag+0x1>
 368:	89 2b       	or	r24, r25
 36a:	a1 f3       	breq	.-24     	; 0x354 <main+0x4c>
			//Reset
			rflag = 0;
 36c:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <rflag>
 370:	10 92 05 20 	sts	0x2005, r1	; 0x802005 <rflag+0x1>
			//Reset
			tflag = 0;
 374:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <tflag>
 378:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <tflag+0x1>
			//Output
			if(c == '1') {
 37c:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <c>
 380:	81 33       	cpi	r24, 0x31	; 49
 382:	e1 f4       	brne	.+56     	; 0x3bc <main+0xb4>
				//CDS
				//ADCA_CH0_MUXCTRL = ADC_CH_MUXPOS_PIN1_gc | ADC_CH_MUXNEG_PIN6_gc;
				//Analog input jumper
				ADCA_CH0_MUXCTRL = ADC_CH_MUXPOS_PIN4_gc | ADC_CH_MUXNEG_PIN5_gc;
 384:	81 e2       	ldi	r24, 0x21	; 33
 386:	92 e0       	ldi	r25, 0x02	; 2
 388:	21 e2       	ldi	r18, 0x21	; 33
 38a:	fc 01       	movw	r30, r24
 38c:	20 83       	st	Z, r18
				if(test<1000){
 38e:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 392:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 396:	88 3e       	cpi	r24, 0xE8	; 232
 398:	93 40       	sbci	r25, 0x03	; 3
 39a:	e4 f6       	brge	.-72     	; 0x354 <main+0x4c>
					//Output
					usartd0_out_char(((uint8_t) test));	//LSB
 39c:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 3a0:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 3a4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <usartd0_out_char>
					usartd0_out_char(((uint8_t) (test >> 8)));	//MSB
 3a8:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 3ac:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 3b0:	89 2f       	mov	r24, r25
 3b2:	99 0f       	add	r25, r25
 3b4:	99 0b       	sbc	r25, r25
 3b6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <usartd0_out_char>
 3ba:	cc cf       	rjmp	.-104    	; 0x354 <main+0x4c>
				}
			}
			else if (c == '2') {
 3bc:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <c>
 3c0:	82 33       	cpi	r24, 0x32	; 50
 3c2:	e1 f4       	brne	.+56     	; 0x3fc <main+0xf4>
				//Analog input jumper
				ADCA_CH0_MUXCTRL = ADC_CH_MUXPOS_PIN4_gc | ADC_CH_MUXNEG_PIN5_gc;
 3c4:	81 e2       	ldi	r24, 0x21	; 33
 3c6:	92 e0       	ldi	r25, 0x02	; 2
 3c8:	21 e2       	ldi	r18, 0x21	; 33
 3ca:	fc 01       	movw	r30, r24
 3cc:	20 83       	st	Z, r18
				if(test>=0){
 3ce:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 3d2:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 3d6:	99 23       	and	r25, r25
 3d8:	0c f4       	brge	.+2      	; 0x3dc <main+0xd4>
 3da:	bc cf       	rjmp	.-136    	; 0x354 <main+0x4c>
					//Output
					usartd0_out_char(((uint8_t) test));	//LSB
 3dc:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 3e0:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 3e4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <usartd0_out_char>
					usartd0_out_char(((uint8_t) (test >> 8)));	//MSB
 3e8:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 3ec:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 3f0:	89 2f       	mov	r24, r25
 3f2:	99 0f       	add	r25, r25
 3f4:	99 0b       	sbc	r25, r25
 3f6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <usartd0_out_char>
 3fa:	ac cf       	rjmp	.-168    	; 0x354 <main+0x4c>
				}
			}
			else if (c == '3') {
 3fc:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <c>
 400:	83 33       	cpi	r24, 0x33	; 51
 402:	09 f0       	breq	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 404:	a7 cf       	rjmp	.-178    	; 0x354 <main+0x4c>
				if(test>500 || test<-500){
 406:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 40a:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 40e:	85 3f       	cpi	r24, 0xF5	; 245
 410:	91 40       	sbci	r25, 0x01	; 1
 412:	44 f4       	brge	.+16     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 414:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 418:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 41c:	8c 30       	cpi	r24, 0x0C	; 12
 41e:	9e 4f       	sbci	r25, 0xFE	; 254
 420:	0c f0       	brlt	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 422:	98 cf       	rjmp	.-208    	; 0x354 <main+0x4c>
					//Analog input jumper
					ADCA_CH0_MUXCTRL = ADC_CH_MUXPOS_PIN4_gc | ADC_CH_MUXNEG_PIN5_gc;
 424:	81 e2       	ldi	r24, 0x21	; 33
 426:	92 e0       	ldi	r25, 0x02	; 2
 428:	21 e2       	ldi	r18, 0x21	; 33
 42a:	fc 01       	movw	r30, r24
 42c:	20 83       	st	Z, r18
					//Output
					usartd0_out_char(((uint8_t) test));	//LSB
 42e:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 432:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 436:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <usartd0_out_char>
					usartd0_out_char(((uint8_t) (test >> 8)));	//MSB
 43a:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 43e:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 442:	89 2f       	mov	r24, r25
 444:	99 0f       	add	r25, r25
 446:	99 0b       	sbc	r25, r25
 448:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <usartd0_out_char>

			//Output
			usartd0_out_char(((uint8_t) test));	//LSB
			usartd0_out_char(((uint8_t) (test >> 8)));	//MSB
		}*/
	}
 44c:	83 cf       	rjmp	.-250    	; 0x354 <main+0x4c>

0000044e <__vector_71>:
	return 0;
}

//Interrupt Handler
ISR (ADCA_CH0_vect){
 44e:	1f 92       	push	r1
 450:	0f 92       	push	r0
 452:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 456:	0f 92       	push	r0
 458:	11 24       	eor	r1, r1
 45a:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 45e:	0f 92       	push	r0
 460:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 464:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 468:	0f 92       	push	r0
 46a:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 46e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 472:	0f 92       	push	r0
 474:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 478:	2f 93       	push	r18
 47a:	3f 93       	push	r19
 47c:	8f 93       	push	r24
 47e:	9f 93       	push	r25
 480:	ef 93       	push	r30
 482:	ff 93       	push	r31
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
	//Test ADC value
	test = ADCA_CH0_RES;
 48c:	84 e2       	ldi	r24, 0x24	; 36
 48e:	92 e0       	ldi	r25, 0x02	; 2
 490:	fc 01       	movw	r30, r24
 492:	80 81       	ld	r24, Z
 494:	91 81       	ldd	r25, Z+1	; 0x01
 496:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
 49a:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <_edata+0x1>

	//Set conversion flag
	tflag = 1;
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <tflag>
 4a6:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <tflag+0x1>
	
	//Turn off the BLUE_PWM LED
	PORTD_OUTTGL = BLUE_PWM_LED;
 4aa:	87 e6       	ldi	r24, 0x67	; 103
 4ac:	96 e0       	ldi	r25, 0x06	; 6
 4ae:	20 e4       	ldi	r18, 0x40	; 64
 4b0:	fc 01       	movw	r30, r24
 4b2:	20 83       	st	Z, r18
	//Toggle J3 pin
	PORTA_OUTTGL |= PIN5_bm;
 4b4:	87 e0       	ldi	r24, 0x07	; 7
 4b6:	96 e0       	ldi	r25, 0x06	; 6
 4b8:	27 e0       	ldi	r18, 0x07	; 7
 4ba:	36 e0       	ldi	r19, 0x06	; 6
 4bc:	f9 01       	movw	r30, r18
 4be:	20 81       	ld	r18, Z
 4c0:	20 62       	ori	r18, 0x20	; 32
 4c2:	fc 01       	movw	r30, r24
 4c4:	20 83       	st	Z, r18
}
 4c6:	00 00       	nop
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	ff 91       	pop	r31
 4ce:	ef 91       	pop	r30
 4d0:	9f 91       	pop	r25
 4d2:	8f 91       	pop	r24
 4d4:	3f 91       	pop	r19
 4d6:	2f 91       	pop	r18
 4d8:	0f 90       	pop	r0
 4da:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 4de:	0f 90       	pop	r0
 4e0:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 4e4:	0f 90       	pop	r0
 4e6:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 4ea:	0f 90       	pop	r0
 4ec:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 4f0:	0f 90       	pop	r0
 4f2:	1f 90       	pop	r1
 4f4:	18 95       	reti

000004f6 <__vector_88>:

//Receiver Handler
ISR (USARTD0_RXC_vect){
 4f6:	1f 92       	push	r1
 4f8:	0f 92       	push	r0
 4fa:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 4fe:	0f 92       	push	r0
 500:	11 24       	eor	r1, r1
 502:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 506:	0f 92       	push	r0
 508:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 50c:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 510:	0f 92       	push	r0
 512:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 516:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 51a:	0f 92       	push	r0
 51c:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 520:	8f 93       	push	r24
 522:	9f 93       	push	r25
 524:	ef 93       	push	r30
 526:	ff 93       	push	r31
 528:	cf 93       	push	r28
 52a:	df 93       	push	r29
 52c:	cd b7       	in	r28, 0x3d	; 61
 52e:	de b7       	in	r29, 0x3e	; 62
	//Get input
	c = USARTD0.DATA;
 530:	80 ea       	ldi	r24, 0xA0	; 160
 532:	99 e0       	ldi	r25, 0x09	; 9
 534:	fc 01       	movw	r30, r24
 536:	80 81       	ld	r24, Z
 538:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <c>
	
	//Set receiver flag
	rflag = 1;
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <rflag>
 544:	90 93 05 20 	sts	0x2005, r25	; 0x802005 <rflag+0x1>
}
 548:	00 00       	nop
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	ff 91       	pop	r31
 550:	ef 91       	pop	r30
 552:	9f 91       	pop	r25
 554:	8f 91       	pop	r24
 556:	0f 90       	pop	r0
 558:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 55c:	0f 90       	pop	r0
 55e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 562:	0f 90       	pop	r0
 564:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 568:	0f 90       	pop	r0
 56a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 56e:	0f 90       	pop	r0
 570:	1f 90       	pop	r1
 572:	18 95       	reti

00000574 <usartd0_init>:
*/

#include <avr/io.h>

//USART Initialization
void usartd0_init(void){
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	cd b7       	in	r28, 0x3d	; 61
 57a:	de b7       	in	r29, 0x3e	; 62
	//Configure TxD and RxD pins
	PORTD.OUTSET = PIN3_bm;
 57c:	80 e6       	ldi	r24, 0x60	; 96
 57e:	96 e0       	ldi	r25, 0x06	; 6
 580:	28 e0       	ldi	r18, 0x08	; 8
 582:	fc 01       	movw	r30, r24
 584:	25 83       	std	Z+5, r18	; 0x05
	PORTD.DIRSET = PIN3_bm;
 586:	80 e6       	ldi	r24, 0x60	; 96
 588:	96 e0       	ldi	r25, 0x06	; 6
 58a:	28 e0       	ldi	r18, 0x08	; 8
 58c:	fc 01       	movw	r30, r24
 58e:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 590:	80 e6       	ldi	r24, 0x60	; 96
 592:	96 e0       	ldi	r25, 0x06	; 6
 594:	24 e0       	ldi	r18, 0x04	; 4
 596:	fc 01       	movw	r30, r24
 598:	22 83       	std	Z+2, r18	; 0x02
	
	//Baud rate: At 2 MHz, 0 BSEL, -3 BSCALE corresponds to 128000 bps */
	USARTD0.BAUDCTRLA = (uint8_t)0;
 59a:	80 ea       	ldi	r24, 0xA0	; 160
 59c:	99 e0       	ldi	r25, 0x09	; 9
 59e:	fc 01       	movw	r30, r24
 5a0:	16 82       	std	Z+6, r1	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)( (-3 << 4) | (0 >> 8));
 5a2:	80 ea       	ldi	r24, 0xA0	; 160
 5a4:	99 e0       	ldi	r25, 0x09	; 9
 5a6:	20 ed       	ldi	r18, 0xD0	; 208
 5a8:	fc 01       	movw	r30, r24
 5aa:	27 83       	std	Z+7, r18	; 0x07

	//8 data bits, no parity, and one stop bit.
	USARTD0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc & ~USART_SBMODE_bm;
 5ac:	80 ea       	ldi	r24, 0xA0	; 160
 5ae:	99 e0       	ldi	r25, 0x09	; 9
 5b0:	23 e0       	ldi	r18, 0x03	; 3
 5b2:	fc 01       	movw	r30, r24
 5b4:	25 83       	std	Z+5, r18	; 0x05

	//Enable Receiver and/or Transmitter
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 5b6:	80 ea       	ldi	r24, 0xA0	; 160
 5b8:	99 e0       	ldi	r25, 0x09	; 9
 5ba:	28 e1       	ldi	r18, 0x18	; 24
 5bc:	fc 01       	movw	r30, r24
 5be:	24 83       	std	Z+4, r18	; 0x04
	
	//Enable interrupt 
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc;
 5c0:	80 ea       	ldi	r24, 0xA0	; 160
 5c2:	99 e0       	ldi	r25, 0x09	; 9
 5c4:	20 e1       	ldi	r18, 0x10	; 16
 5c6:	fc 01       	movw	r30, r24
 5c8:	23 83       	std	Z+3, r18	; 0x03
}
 5ca:	00 00       	nop
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	08 95       	ret

000005d2 <usartd0_out_char>:

//Output character
void usartd0_out_char(char output){
 5d2:	cf 93       	push	r28
 5d4:	df 93       	push	r29
 5d6:	1f 92       	push	r1
 5d8:	cd b7       	in	r28, 0x3d	; 61
 5da:	de b7       	in	r29, 0x3e	; 62
 5dc:	89 83       	std	Y+1, r24	; 0x01
	//Wait till transmission is done
	while(!(USARTD0.STATUS & USART_DREIF_bm));
 5de:	00 00       	nop
 5e0:	80 ea       	ldi	r24, 0xA0	; 160
 5e2:	99 e0       	ldi	r25, 0x09	; 9
 5e4:	fc 01       	movw	r30, r24
 5e6:	81 81       	ldd	r24, Z+1	; 0x01
 5e8:	88 2f       	mov	r24, r24
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	80 72       	andi	r24, 0x20	; 32
 5ee:	99 27       	eor	r25, r25
 5f0:	89 2b       	or	r24, r25
 5f2:	b1 f3       	breq	.-20     	; 0x5e0 <usartd0_out_char+0xe>
	USARTD0.DATA = output;	//output c
 5f4:	80 ea       	ldi	r24, 0xA0	; 160
 5f6:	99 e0       	ldi	r25, 0x09	; 9
 5f8:	29 81       	ldd	r18, Y+1	; 0x01
 5fa:	fc 01       	movw	r30, r24
 5fc:	20 83       	st	Z, r18
}
 5fe:	00 00       	nop
 600:	0f 90       	pop	r0
 602:	df 91       	pop	r29
 604:	cf 91       	pop	r28
 606:	08 95       	ret

00000608 <_exit>:
 608:	f8 94       	cli

0000060a <__stop_program>:
 60a:	ff cf       	rjmp	.-2      	; 0x60a <__stop_program>
